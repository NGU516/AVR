
Tilt_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000019c  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c48  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000751  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000663  00000000  00000000  00001691  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000741f  00000000  00000000  00001dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000407  00000000  00000000  000091e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000095ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002a26  00000000  00000000  00009642  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	81 d0       	rcall	.+258    	; 0x18e <main>
  8c:	85 c0       	rjmp	.+266    	; 0x198 <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <i2c_start>:
	_delay_ms(2);
}

void lcd_set_cursor(unsigned char row, unsigned char col) {
	unsigned char address = col + (row == 1 ? 0x40 : 0x00);
	lcd_command(0x80 | address); // 커서 이동 명령
  90:	84 ea       	ldi	r24, 0xA4	; 164
  92:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  96:	ec eb       	ldi	r30, 0xBC	; 188
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	88 23       	and	r24, r24
  9e:	ec f7       	brge	.-6      	; 0x9a <i2c_start+0xa>
  a0:	08 95       	ret

000000a2 <i2c_stop>:
  a2:	84 e9       	ldi	r24, 0x94	; 148
  a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a8:	80 e1       	ldi	r24, 0x10	; 16
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <i2c_stop+0x8>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <i2c_stop+0xe>
  b0:	08 95       	ret

000000b2 <i2c_write>:
  b2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  b6:	84 e8       	ldi	r24, 0x84	; 132
  b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  bc:	ec eb       	ldi	r30, 0xBC	; 188
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	88 23       	and	r24, r24
  c4:	ec f7       	brge	.-6      	; 0xc0 <i2c_write+0xe>
  c6:	08 95       	ret

000000c8 <lcd_command>:
  c8:	cf 93       	push	r28
  ca:	c8 2f       	mov	r28, r24
  cc:	e1 df       	rcall	.-62     	; 0x90 <i2c_start>
  ce:	8e e4       	ldi	r24, 0x4E	; 78
  d0:	f0 df       	rcall	.-32     	; 0xb2 <i2c_write>
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	ee df       	rcall	.-36     	; 0xb2 <i2c_write>
  d6:	8c 2f       	mov	r24, r28
  d8:	ec df       	rcall	.-40     	; 0xb2 <i2c_write>
  da:	e3 df       	rcall	.-58     	; 0xa2 <i2c_stop>
  dc:	83 ef       	ldi	r24, 0xF3	; 243
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_command+0x18>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_command+0x1e>
  e6:	00 00       	nop
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <lcd_data>:
  ec:	cf 93       	push	r28
  ee:	c8 2f       	mov	r28, r24
  f0:	cf df       	rcall	.-98     	; 0x90 <i2c_start>
  f2:	8f e4       	ldi	r24, 0x4F	; 79
  f4:	de df       	rcall	.-68     	; 0xb2 <i2c_write>
  f6:	80 e4       	ldi	r24, 0x40	; 64
  f8:	dc df       	rcall	.-72     	; 0xb2 <i2c_write>
  fa:	8c 2f       	mov	r24, r28
  fc:	da df       	rcall	.-76     	; 0xb2 <i2c_write>
  fe:	d1 df       	rcall	.-94     	; 0xa2 <i2c_stop>
 100:	80 e1       	ldi	r24, 0x10	; 16
 102:	8a 95       	dec	r24
 104:	f1 f7       	brne	.-4      	; 0x102 <lcd_data+0x16>
 106:	00 c0       	rjmp	.+0      	; 0x108 <lcd_data+0x1c>
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <lcd_init>:
 10c:	83 ed       	ldi	r24, 0xD3	; 211
 10e:	90 e3       	ldi	r25, 0x30	; 48
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_init+0x4>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_init+0xa>
 116:	00 00       	nop
 118:	80 e3       	ldi	r24, 0x30	; 48
 11a:	d6 df       	rcall	.-84     	; 0xc8 <lcd_command>
 11c:	81 ee       	ldi	r24, 0xE1	; 225
 11e:	94 e0       	ldi	r25, 0x04	; 4
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <lcd_init+0x14>
 124:	00 c0       	rjmp	.+0      	; 0x126 <lcd_init+0x1a>
 126:	00 00       	nop
 128:	80 e3       	ldi	r24, 0x30	; 48
 12a:	ce df       	rcall	.-100    	; 0xc8 <lcd_command>
 12c:	91 e2       	ldi	r25, 0x21	; 33
 12e:	9a 95       	dec	r25
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_init+0x22>
 132:	00 00       	nop
 134:	80 e3       	ldi	r24, 0x30	; 48
 136:	c8 df       	rcall	.-112    	; 0xc8 <lcd_command>
 138:	81 e2       	ldi	r24, 0x21	; 33
 13a:	8a 95       	dec	r24
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_init+0x2e>
 13e:	00 00       	nop
 140:	80 e2       	ldi	r24, 0x20	; 32
 142:	c2 df       	rcall	.-124    	; 0xc8 <lcd_command>
 144:	91 e2       	ldi	r25, 0x21	; 33
 146:	9a 95       	dec	r25
 148:	f1 f7       	brne	.-4      	; 0x146 <lcd_init+0x3a>
 14a:	00 00       	nop
 14c:	88 e2       	ldi	r24, 0x28	; 40
 14e:	bc df       	rcall	.-136    	; 0xc8 <lcd_command>
 150:	88 e0       	ldi	r24, 0x08	; 8
 152:	ba df       	rcall	.-140    	; 0xc8 <lcd_command>
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	b8 df       	rcall	.-144    	; 0xc8 <lcd_command>
 158:	83 ef       	ldi	r24, 0xF3	; 243
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_init+0x50>
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_init+0x56>
 162:	00 00       	nop
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	b0 df       	rcall	.-160    	; 0xc8 <lcd_command>
 168:	8c e0       	ldi	r24, 0x0C	; 12
 16a:	ae df       	rcall	.-164    	; 0xc8 <lcd_command>
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	ac cf       	rjmp	.-168    	; 0xc8 <lcd_command>
 170:	08 95       	ret

00000172 <lcd_print>:
}

void lcd_print(const char *str) {
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
	while (*str != '\0') {
 178:	88 81       	ld	r24, Y
 17a:	88 23       	and	r24, r24
 17c:	29 f0       	breq	.+10     	; 0x188 <lcd_print+0x16>
 17e:	21 96       	adiw	r28, 0x01	; 1
		lcd_data(*str);
 180:	b5 df       	rcall	.-150    	; 0xec <lcd_data>
	unsigned char address = col + (row == 1 ? 0x40 : 0x00);
	lcd_command(0x80 | address); // 커서 이동 명령
}

void lcd_print(const char *str) {
	while (*str != '\0') {
 182:	89 91       	ld	r24, Y+
 184:	81 11       	cpse	r24, r1
 186:	fc cf       	rjmp	.-8      	; 0x180 <lcd_print+0xe>
		lcd_data(*str);
		str++;
	}
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <main>:
void lcd_set_cursor(unsigned char row, unsigned char col);
void lcd_print(const char *str);

int main(void) {
	// 초기화
	lcd_init();
 18e:	be df       	rcall	.-132    	; 0x10c <lcd_init>
	
	// 화면에 문자열 출력
	lcd_print("Hello, I2C LCD!");
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	ee df       	rcall	.-36     	; 0x172 <lcd_print>
 196:	ff cf       	rjmp	.-2      	; 0x196 <main+0x8>

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>

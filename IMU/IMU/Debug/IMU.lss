
IMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000c2c  00000cc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800116  00800116  00000cd6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cd6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001482  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9b  00000000  00000000  00002306  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f5b  00000000  00000000  00002da1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  00003cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000791f  00000000  00000000  00003f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009dc  00000000  00000000  0000b867  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000c243  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002d60  00000000  00000000  0000c323  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	58 c1       	rjmp	.+688    	; 0x2fa <__vector_18>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e2       	ldi	r30, 0x2C	; 44
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 31       	cpi	r26, 0x19	; 25
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	42 d1       	rcall	.+644    	; 0x320 <main>
  9c:	c5 c5       	rjmp	.+2954   	; 0xc28 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <sendHalfByte>:
		TWI_Transmit_Addr(PortLCD |= 0x08, LCD_ADDR);  // BackLight ON
		break;
	}
}

void sendHalfByte(unsigned char c) { // 4 bit
  a0:	cf 93       	push	r28
  a2:	c8 2f       	mov	r28, r24
	// current Higher 4 Bit = data lower 4bit
	c <<= 4;

	TWI_Transmit_Addr(PortLCD |= 0x04, LCD_ADDR); // Enable E(0x04)
  a4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
  ac:	84 60       	ori	r24, 0x04	; 4
  ae:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
  b2:	dd d1       	rcall	.+954    	; 0x46e <TWI_Transmit_Addr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	87 ec       	ldi	r24, 0xC7	; 199
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <sendHalfByte+0x18>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <sendHalfByte+0x1e>
  be:	00 00       	nop
	_delay_us(50);

	TWI_Transmit_Addr(PortLCD | c, LCD_ADDR);
  c0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
  c4:	c2 95       	swap	r28
  c6:	c0 7f       	andi	r28, 0xF0	; 240
  c8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  cc:	8c 2b       	or	r24, r28
  ce:	cf d1       	rcall	.+926    	; 0x46e <TWI_Transmit_Addr>

	TWI_Transmit_Addr(PortLCD &= ~0x04, LCD_ADDR); // Disable E(0x04)
  d0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
  d8:	8b 7f       	andi	r24, 0xFB	; 251
  da:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
  de:	c7 d1       	rcall	.+910    	; 0x46e <TWI_Transmit_Addr>
  e0:	87 ec       	ldi	r24, 0xC7	; 199
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <sendHalfByte+0x44>
  e8:	00 c0       	rjmp	.+0      	; 0xea <sendHalfByte+0x4a>
  ea:	00 00       	nop
	_delay_us(50);
}
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <sendByte>:

void sendByte(unsigned char c, unsigned char mode) {
  f0:	cf 93       	push	r28
  f2:	c8 2f       	mov	r28, r24
	if (mode == 0)
  f4:	61 11       	cpse	r22, r1
  f6:	09 c0       	rjmp	.+18     	; 0x10a <sendByte+0x1a>
	TWI_Transmit_Addr(PortLCD &= ~0x01, LCD_ADDR); // PortLCD : 0xX0, RS
  f8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 100:	8e 7f       	andi	r24, 0xFE	; 254
 102:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 106:	b3 d1       	rcall	.+870    	; 0x46e <TWI_Transmit_Addr>
 108:	08 c0       	rjmp	.+16     	; 0x11a <sendByte+0x2a>
	else
	TWI_Transmit_Addr(PortLCD |= 0x01, LCD_ADDR); // PortLCD : 0xX1, RS
 10a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 118:	aa d1       	rcall	.+852    	; 0x46e <TWI_Transmit_Addr>

	unsigned char half_c = 0;
	half_c = c >> 4;
	sendHalfByte(half_c);
 11a:	8c 2f       	mov	r24, r28
 11c:	82 95       	swap	r24
 11e:	8f 70       	andi	r24, 0x0F	; 15
	sendHalfByte(c);
 120:	bf df       	rcall	.-130    	; 0xa0 <sendHalfByte>
 122:	8c 2f       	mov	r24, r28
 124:	bd df       	rcall	.-134    	; 0xa0 <sendHalfByte>
}
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <LCD_Init>:

volatile unsigned char PortLCD = 0;  // Higher 4bit(0xF0) == data bit, Lower 4bit(0x0F) == Control bit
uint8_t LCD_ADDR = LCD_ADDRESS << 1;  // I2C 주소를 변수로 지정

void LCD_Init(void) {
	sendHalfByte(0b00000011);
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	b9 df       	rcall	.-142    	; 0xa0 <sendHalfByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	8f e1       	ldi	r24, 0x1F	; 31
 130:	9e e4       	ldi	r25, 0x4E	; 78
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_Init+0x8>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_Init+0xe>
 138:	00 00       	nop
	_delay_ms(5);
	sendHalfByte(0b00000011);
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	b1 df       	rcall	.-158    	; 0xa0 <sendHalfByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	8f e8       	ldi	r24, 0x8F	; 143
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_Init+0x18>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_Init+0x1e>
	_delay_us(100);
	sendHalfByte(0b00000011);
 148:	00 00       	nop
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	a9 df       	rcall	.-174    	; 0xa0 <sendHalfByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	8f e9       	ldi	r24, 0x9F	; 159
 150:	9f e0       	ldi	r25, 0x0F	; 15
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <LCD_Init+0x28>
 156:	00 c0       	rjmp	.+0      	; 0x158 <LCD_Init+0x2e>
	_delay_ms(1);
	sendHalfByte(0b00000010);
 158:	00 00       	nop
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	a1 df       	rcall	.-190    	; 0xa0 <sendHalfByte>
 15e:	8f e9       	ldi	r24, 0x9F	; 159
 160:	9f e0       	ldi	r25, 0x0F	; 15
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_Init+0x38>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_Init+0x3e>
	_delay_ms(1);

	sendByte(0b00101000, 0);  // Data 4bit, Line 2, Font 5x8
 168:	00 00       	nop
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	88 e2       	ldi	r24, 0x28	; 40
 16e:	c0 df       	rcall	.-128    	; 0xf0 <sendByte>
 170:	8f e9       	ldi	r24, 0x9F	; 159
 172:	9f e0       	ldi	r25, 0x0F	; 15
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LCD_Init+0x4a>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_Init+0x50>
	_delay_ms(1);
	sendByte(0b00001111, 0);  // Display ON, Cursor ON, Blink ON
 17a:	00 00       	nop
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	8f e0       	ldi	r24, 0x0F	; 15
 180:	b7 df       	rcall	.-146    	; 0xf0 <sendByte>
 182:	8f e9       	ldi	r24, 0x9F	; 159
 184:	9f e0       	ldi	r25, 0x0F	; 15
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_Init+0x5c>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_Init+0x62>
 18c:	00 00       	nop
	_delay_ms(1);

	TWI_Transmit_Addr(PortLCD |= 0x08, LCD_ADDR);  // BackLight ON
 18e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 192:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 196:	88 60       	ori	r24, 0x08	; 8
 198:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 19c:	68 d1       	rcall	.+720    	; 0x46e <TWI_Transmit_Addr>
	TWI_Transmit_Addr(PortLCD &= ~0x02, LCD_ADDR);  // LCD Write ON
 19e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 1a6:	8d 7f       	andi	r24, 0xFD	; 253
 1a8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 1ac:	60 c1       	rjmp	.+704    	; 0x46e <TWI_Transmit_Addr>
 1ae:	08 95       	ret

000001b0 <LCD_sendString>:
	half_c = c >> 4;
	sendHalfByte(half_c);
	sendHalfByte(c);
}

void LCD_sendString(char s[]) {
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	fc 01       	movw	r30, r24
	char n;
	for(n=0; s[n]!='\0'; n++)
 1b8:	80 81       	ld	r24, Z
 1ba:	88 23       	and	r24, r24
 1bc:	69 f0       	breq	.+26     	; 0x1d8 <LCD_sendString+0x28>
 1be:	8f 01       	movw	r16, r30
 1c0:	c0 e0       	ldi	r28, 0x00	; 0
		sendByte(s[n], 1);
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	95 df       	rcall	.-214    	; 0xf0 <sendByte>
 1c6:	cf 5f       	subi	r28, 0xFF	; 255
	sendHalfByte(c);
}

void LCD_sendString(char s[]) {
	char n;
	for(n=0; s[n]!='\0'; n++)
 1c8:	f8 01       	movw	r30, r16
 1ca:	ec 0f       	add	r30, r28
 1cc:	f1 1d       	adc	r31, r1
 1ce:	c7 fd       	sbrc	r28, 7
 1d0:	fa 95       	dec	r31
 1d2:	80 81       	ld	r24, Z
 1d4:	81 11       	cpse	r24, r1
 1d6:	f5 cf       	rjmp	.-22     	; 0x1c2 <LCD_sendString+0x12>
		sendByte(s[n], 1);
}
 1d8:	cf 91       	pop	r28
 1da:	1f 91       	pop	r17
 1dc:	0f 91       	pop	r16
 1de:	08 95       	ret

000001e0 <LCD_setPosition>:

void LCD_setPosition(unsigned char x, unsigned char line) {	// HD44780 data sheet for reference
	switch(line) {
 1e0:	66 23       	and	r22, r22
 1e2:	19 f0       	breq	.+6      	; 0x1ea <LCD_setPosition+0xa>
 1e4:	61 30       	cpi	r22, 0x01	; 1
 1e6:	29 f0       	breq	.+10     	; 0x1f2 <LCD_setPosition+0x12>
 1e8:	08 95       	ret
		case 0: 
			sendByte(x | 0x80, 0);
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	80 68       	ori	r24, 0x80	; 128
 1ee:	80 cf       	rjmp	.-256    	; 0xf0 <sendByte>
			break;
 1f0:	08 95       	ret
		case 1: 
			sendByte((x+0x40) | 0x80, 0);
 1f2:	80 5c       	subi	r24, 0xC0	; 192
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	80 68       	ori	r24, 0x80	; 128
 1f8:	7b cf       	rjmp	.-266    	; 0xf0 <sendByte>
 1fa:	08 95       	ret

000001fc <LCD_clear>:
			break;
	}
}

void LCD_clear(void) {
	sendByte(0x01, 0);
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	77 df       	rcall	.-274    	; 0xf0 <sendByte>
 202:	8f e1       	ldi	r24, 0x1F	; 31
 204:	9e e4       	ldi	r25, 0x4E	; 78
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <LCD_clear+0xa>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <LCD_clear+0x10>
 20c:	00 00       	nop
 20e:	08 95       	ret

00000210 <UART_INIT>:

void UART_Transmit_data(const char* label, int16_t data) {
	char buffer[17];	// register length 16bit
	sprintf(buffer, "%s %d", label, data);
	UART_Transmit_string(buffer);
}
 210:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 214:	87 e6       	ldi	r24, 0x67	; 103
 216:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 21a:	88 e9       	ldi	r24, 0x98	; 152
 21c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 220:	86 e0       	ldi	r24, 0x06	; 6
 222:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 226:	08 95       	ret

00000228 <UART_Transmit_char>:
 228:	e0 ec       	ldi	r30, 0xC0	; 192
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	90 81       	ld	r25, Z
 22e:	95 ff       	sbrs	r25, 5
 230:	fd cf       	rjmp	.-6      	; 0x22c <UART_Transmit_char+0x4>
 232:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 236:	08 95       	ret

00000238 <I2C_INIT>:

void I2C_INIT() {
	TWSR = 0;  // Set prescaler 1
 238:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = ((F_CPU / 100000UL) - 16) / 2;  // Set bit rate 100kHz
 23c:	88 e4       	ldi	r24, 0x48	; 72
 23e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 242:	08 95       	ret

00000244 <I2C_START>:

}


void I2C_START() {
	TWCR = (1 << TWSTA) | (1 << TWINT) | (1 << TWEN);
 244:	84 ea       	ldi	r24, 0xA4	; 164
 246:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 24a:	ec eb       	ldi	r30, 0xBC	; 188
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	88 23       	and	r24, r24
 252:	ec f7       	brge	.-6      	; 0x24e <I2C_START+0xa>
}
 254:	08 95       	ret

00000256 <I2C_STOP>:

void I2C_STOP() {
	TWCR = (1 << TWSTO) | (1 << TWINT) | (1 << TWEN);
 256:	84 e9       	ldi	r24, 0x94	; 148
 258:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25c:	87 ec       	ldi	r24, 0xC7	; 199
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <I2C_STOP+0xa>
 264:	00 c0       	rjmp	.+0      	; 0x266 <I2C_STOP+0x10>
 266:	00 00       	nop
 268:	08 95       	ret

0000026a <I2C_WRITE>:
	_delay_us(50);
}

void I2C_WRITE(uint8_t data) {
	TWDR = data;
 26a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT) | (1 << TWEN);
 26e:	84 e8       	ldi	r24, 0x84	; 132
 270:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 274:	ec eb       	ldi	r30, 0xBC	; 188
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	88 23       	and	r24, r24
 27c:	ec f7       	brge	.-6      	; 0x278 <I2C_WRITE+0xe>
}
 27e:	08 95       	ret

00000280 <I2C_READ_ACK>:

uint8_t I2C_READ_ACK() {
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 280:	84 ec       	ldi	r24, 0xC4	; 196
 282:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 286:	ec eb       	ldi	r30, 0xBC	; 188
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	88 23       	and	r24, r24
 28e:	ec f7       	brge	.-6      	; 0x28a <I2C_READ_ACK+0xa>
	UART_Transmit_char('A');
 290:	81 e4       	ldi	r24, 0x41	; 65
 292:	ca df       	rcall	.-108    	; 0x228 <UART_Transmit_char>
	return TWDR;    // Higher 8bit
 294:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 298:	08 95       	ret

0000029a <I2C_READ_NACK>:

uint8_t I2C_READ_NACK() {
	TWCR = (1 << TWINT) | (1 << TWEN);
 29a:	84 e8       	ldi	r24, 0x84	; 132
 29c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 2a0:	ec eb       	ldi	r30, 0xBC	; 188
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	88 23       	and	r24, r24
 2a8:	ec f7       	brge	.-6      	; 0x2a4 <I2C_READ_NACK+0xa>
	UART_Transmit_char('B');
 2aa:	82 e4       	ldi	r24, 0x42	; 66
 2ac:	bd df       	rcall	.-134    	; 0x228 <UART_Transmit_char>
	return TWDR;    // Lower 8bit
 2ae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 2b2:	08 95       	ret

000002b4 <read_mpu9250_register16>:


int16_t read_mpu9250_register16(uint8_t reg_addr) {
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	c8 2f       	mov	r28, r24
	UART_Transmit_char('1');
 2ba:	81 e3       	ldi	r24, 0x31	; 49
 2bc:	b5 df       	rcall	.-150    	; 0x228 <UART_Transmit_char>
	I2C_START();
 2be:	c2 df       	rcall	.-124    	; 0x244 <I2C_START>
	I2C_WRITE((MPU9250_ADDRESS << 1) | 0);    // LSB 0: WRITE
 2c0:	80 ed       	ldi	r24, 0xD0	; 208
 2c2:	d3 df       	rcall	.-90     	; 0x26a <I2C_WRITE>
	I2C_WRITE(reg_addr);
 2c4:	8c 2f       	mov	r24, r28
	UART_Transmit_char('2');
 2c6:	d1 df       	rcall	.-94     	; 0x26a <I2C_WRITE>
 2c8:	82 e3       	ldi	r24, 0x32	; 50
	I2C_START();
 2ca:	ae df       	rcall	.-164    	; 0x228 <UART_Transmit_char>
	UART_Transmit_char('3');
 2cc:	bb df       	rcall	.-138    	; 0x244 <I2C_START>
 2ce:	83 e3       	ldi	r24, 0x33	; 51
	I2C_WRITE((MPU9250_ADDRESS << 1) | 1);    // LSB 1: READ
 2d0:	ab df       	rcall	.-170    	; 0x228 <UART_Transmit_char>
 2d2:	81 ed       	ldi	r24, 0xD1	; 209
 2d4:	ca df       	rcall	.-108    	; 0x26a <I2C_WRITE>
	UART_Transmit_char('4');
 2d6:	84 e3       	ldi	r24, 0x34	; 52
 2d8:	a7 df       	rcall	.-178    	; 0x228 <UART_Transmit_char>
	int16_t data = (I2C_READ_ACK() << 8) | I2C_READ_NACK();
 2da:	d2 df       	rcall	.-92     	; 0x280 <I2C_READ_ACK>
 2dc:	c8 2f       	mov	r28, r24
 2de:	dd df       	rcall	.-70     	; 0x29a <I2C_READ_NACK>
 2e0:	d0 e0       	ldi	r29, 0x00	; 0
 2e2:	dc 2f       	mov	r29, r28
 2e4:	cc 27       	eor	r28, r28
 2e6:	c8 2b       	or	r28, r24
	UART_Transmit_char('5');
 2e8:	85 e3       	ldi	r24, 0x35	; 53
 2ea:	9e df       	rcall	.-196    	; 0x228 <UART_Transmit_char>
 2ec:	b4 df       	rcall	.-152    	; 0x256 <I2C_STOP>
	I2C_STOP();
 2ee:	86 e3       	ldi	r24, 0x36	; 54
 2f0:	9b df       	rcall	.-202    	; 0x228 <UART_Transmit_char>
	UART_Transmit_char('6');
 2f2:	ce 01       	movw	r24, r28
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
	return data;
}
 2f8:	08 95       	ret

000002fa <__vector_18>:
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63


ISR(USART_RX_vect) {
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	8f 93       	push	r24
	Received_char = UDR0;
 306:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 30a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Received_char>
	Data_Received = 1;
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <Data_Received>
}
 314:	8f 91       	pop	r24
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <main>:

int main(void) {
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
 328:	65 97       	sbiw	r28, 0x15	; 21
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	de bf       	out	0x3e, r29	; 62
 330:	0f be       	out	0x3f, r0	; 63
 332:	cd bf       	out	0x3d, r28	; 61
	sei();
 334:	78 94       	sei
	UART_INIT();
 336:	6c df       	rcall	.-296    	; 0x210 <UART_INIT>
	I2C_INIT();
 338:	7f df       	rcall	.-258    	; 0x238 <I2C_INIT>
 33a:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33c:	89 ef       	ldi	r24, 0xF9	; 249
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	21 50       	subi	r18, 0x01	; 1
 342:	80 40       	sbci	r24, 0x00	; 0
 344:	90 40       	sbci	r25, 0x00	; 0
 346:	e1 f7       	brne	.-8      	; 0x340 <main+0x20>
 348:	00 c0       	rjmp	.+0      	; 0x34a <main+0x2a>
 34a:	00 00       	nop
	_delay_ms(20);
	LCD_Init();
 34c:	ee de       	rcall	.-548    	; 0x12a <LCD_Init>
	cli();
 34e:	f8 94       	cli
	LCD_clear();
 350:	55 df       	rcall	.-342    	; 0x1fc <LCD_clear>
 352:	2f ef       	ldi	r18, 0xFF	; 255
 354:	89 ef       	ldi	r24, 0xF9	; 249
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	21 50       	subi	r18, 0x01	; 1
 35a:	80 40       	sbci	r24, 0x00	; 0
 35c:	90 40       	sbci	r25, 0x00	; 0
 35e:	e1 f7       	brne	.-8      	; 0x358 <main+0x38>
 360:	00 c0       	rjmp	.+0      	; 0x362 <main+0x42>
 362:	00 00       	nop
 364:	78 94       	sei
	_delay_ms(20);
	sei();
 366:	07 e0       	ldi	r16, 0x07	; 7
	    // MPU9250 process
	    LCD_setPosition(0, 0);
	    int16_t gyro_x_raw = read_mpu9250_register16(GYRO_XOUT);
	    float gyro_x_data = gyro_x_raw / 250.0;  // set scale ±250°/sec
	    char gyro_x_str[7];
	    sprintf(gyro_x_str, "%+05d", gyro_x_data);
 368:	11 e0       	ldi	r17, 0x01	; 1
 36a:	6e 01       	movw	r12, r28
 36c:	2f e0       	ldi	r18, 0x0F	; 15
 36e:	c2 0e       	add	r12, r18
 370:	d1 1c       	adc	r13, r1
 372:	7e 01       	movw	r14, r28

	    LCD_setPosition(8, 0);
	    int16_t gyro_y_raw = read_mpu9250_register16(GYRO_YOUT);
		float gyro_y_data = gyro_y_raw / 250.0;
	    char gyro_y_str[7];
	    sprintf(gyro_y_str, "%+05d", gyro_y_data);
 374:	88 e0       	ldi	r24, 0x08	; 8
 376:	e8 0e       	add	r14, r24
 378:	f1 1c       	adc	r15, r1
 37a:	ce 01       	movw	r24, r28

	    LCD_setPosition(0, 1);
	    int16_t gyro_z_raw = read_mpu9250_register16(GYRO_ZOUT);
	    float gyro_z_data = gyro_z_raw / 250.0;
	    char gyro_z_str[7];
	    sprintf(gyro_z_str, "%+05d", gyro_z_data);
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	5c 01       	movw	r10, r24
	_delay_ms(20);
	sei();

    while (1) {
	    // MPU9250 process
	    LCD_setPosition(0, 0);
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	2d df       	rcall	.-422    	; 0x1e0 <LCD_setPosition>
	    int16_t gyro_x_raw = read_mpu9250_register16(GYRO_XOUT);
 386:	83 e4       	ldi	r24, 0x43	; 67
 388:	95 df       	rcall	.-214    	; 0x2b4 <read_mpu9250_register16>
	    float gyro_x_data = gyro_x_raw / 250.0;  // set scale ±250°/sec
	    char gyro_x_str[7];
	    sprintf(gyro_x_str, "%+05d", gyro_x_data);
 38a:	bc 01       	movw	r22, r24
 38c:	99 0f       	add	r25, r25
 38e:	88 0b       	sbc	r24, r24
 390:	99 0b       	sbc	r25, r25
 392:	e6 d0       	rcall	.+460    	; 0x560 <__floatsisf>
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	4a e7       	ldi	r20, 0x7A	; 122
 39a:	53 e4       	ldi	r21, 0x43	; 67
 39c:	77 d0       	rcall	.+238    	; 0x48c <__divsf3>
 39e:	9f 93       	push	r25
 3a0:	8f 93       	push	r24
 3a2:	7f 93       	push	r23
 3a4:	6f 93       	push	r22
 3a6:	1f 93       	push	r17
 3a8:	0f 93       	push	r16
 3aa:	df 92       	push	r13
 3ac:	cf 92       	push	r12
	    LCD_sendString(gyro_x_str);
 3ae:	64 d1       	rcall	.+712    	; 0x678 <sprintf>
 3b0:	c6 01       	movw	r24, r12

	    LCD_setPosition(8, 0);
 3b2:	fe de       	rcall	.-516    	; 0x1b0 <LCD_sendString>
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	88 e0       	ldi	r24, 0x08	; 8
 3b8:	13 df       	rcall	.-474    	; 0x1e0 <LCD_setPosition>
	    int16_t gyro_y_raw = read_mpu9250_register16(GYRO_YOUT);
 3ba:	85 e4       	ldi	r24, 0x45	; 69
 3bc:	7b df       	rcall	.-266    	; 0x2b4 <read_mpu9250_register16>
		float gyro_y_data = gyro_y_raw / 250.0;
	    char gyro_y_str[7];
	    sprintf(gyro_y_str, "%+05d", gyro_y_data);
 3be:	bc 01       	movw	r22, r24
 3c0:	99 0f       	add	r25, r25
 3c2:	88 0b       	sbc	r24, r24
 3c4:	99 0b       	sbc	r25, r25
 3c6:	cc d0       	rcall	.+408    	; 0x560 <__floatsisf>
 3c8:	20 e0       	ldi	r18, 0x00	; 0
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	4a e7       	ldi	r20, 0x7A	; 122
 3ce:	53 e4       	ldi	r21, 0x43	; 67
 3d0:	5d d0       	rcall	.+186    	; 0x48c <__divsf3>
 3d2:	9f 93       	push	r25
 3d4:	8f 93       	push	r24
 3d6:	7f 93       	push	r23
 3d8:	6f 93       	push	r22
 3da:	1f 93       	push	r17
 3dc:	0f 93       	push	r16
 3de:	ff 92       	push	r15
 3e0:	ef 92       	push	r14
	    LCD_sendString(gyro_y_str);
 3e2:	4a d1       	rcall	.+660    	; 0x678 <sprintf>
 3e4:	c7 01       	movw	r24, r14

	    LCD_setPosition(0, 1);
 3e6:	e4 de       	rcall	.-568    	; 0x1b0 <LCD_sendString>
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	f9 de       	rcall	.-526    	; 0x1e0 <LCD_setPosition>
	    int16_t gyro_z_raw = read_mpu9250_register16(GYRO_ZOUT);
 3ee:	87 e4       	ldi	r24, 0x47	; 71
 3f0:	61 df       	rcall	.-318    	; 0x2b4 <read_mpu9250_register16>
 3f2:	bc 01       	movw	r22, r24
	    float gyro_z_data = gyro_z_raw / 250.0;
	    char gyro_z_str[7];
	    sprintf(gyro_z_str, "%+05d", gyro_z_data);
 3f4:	99 0f       	add	r25, r25
 3f6:	88 0b       	sbc	r24, r24
 3f8:	99 0b       	sbc	r25, r25
 3fa:	b2 d0       	rcall	.+356    	; 0x560 <__floatsisf>
 3fc:	20 e0       	ldi	r18, 0x00	; 0
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	4a e7       	ldi	r20, 0x7A	; 122
 402:	53 e4       	ldi	r21, 0x43	; 67
 404:	43 d0       	rcall	.+134    	; 0x48c <__divsf3>
 406:	9f 93       	push	r25
 408:	8f 93       	push	r24
 40a:	7f 93       	push	r23
 40c:	6f 93       	push	r22
 40e:	1f 93       	push	r17
 410:	0f 93       	push	r16
 412:	bf 92       	push	r11
 414:	af 92       	push	r10
 416:	30 d1       	rcall	.+608    	; 0x678 <sprintf>
	    LCD_sendString(gyro_z_str);
 418:	c5 01       	movw	r24, r10
 41a:	ca de       	rcall	.-620    	; 0x1b0 <LCD_sendString>
 41c:	61 e0       	ldi	r22, 0x01	; 1
		
		LCD_setPosition(8, 1);
 41e:	88 e0       	ldi	r24, 0x08	; 8
 420:	df de       	rcall	.-578    	; 0x1e0 <LCD_setPosition>
 422:	8d e0       	ldi	r24, 0x0D	; 13
 424:	91 e0       	ldi	r25, 0x01	; 1
	    LCD_sendString("GYRO_XYZ");
 426:	c4 de       	rcall	.-632    	; 0x1b0 <LCD_sendString>
 428:	9f ef       	ldi	r25, 0xFF	; 255
 42a:	29 e6       	ldi	r18, 0x69	; 105
 42c:	88 e1       	ldi	r24, 0x18	; 24
 42e:	91 50       	subi	r25, 0x01	; 1
 430:	20 40       	sbci	r18, 0x00	; 0
 432:	80 40       	sbci	r24, 0x00	; 0
 434:	e1 f7       	brne	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 438:	00 00       	nop
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	f8 94       	cli
 43e:	de bf       	out	0x3e, r29	; 62
 440:	0f be       	out	0x3f, r0	; 63
 442:	cd bf       	out	0x3d, r28	; 61
 444:	9d cf       	rjmp	.-198    	; 0x380 <main+0x60>

00000446 <TWI_Start>:
 446:	84 ea       	ldi	r24, 0xA4	; 164
 448:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

void TWI_Start(void) {
	// TWI Control Register
	// Interrupt, Start bit, Enable Set
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));		// TWI Setup complete -> Interrupt flag set
 44c:	ec eb       	ldi	r30, 0xBC	; 188
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	88 23       	and	r24, r24
 454:	ec f7       	brge	.-6      	; 0x450 <TWI_Start+0xa>
}
 456:	08 95       	ret

00000458 <TWI_Transmit>:

void TWI_Transmit(unsigned char data) {
	// TWI Data Register(Data buffer, 8bit)
	TWDR = data;
 458:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);		// Transmit -> Interrupt
 45c:	84 e8       	ldi	r24, 0x84	; 132
 45e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
 462:	ec eb       	ldi	r30, 0xBC	; 188
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	88 23       	and	r24, r24
 46a:	ec f7       	brge	.-6      	; 0x466 <TWI_Transmit+0xe>
}
 46c:	08 95       	ret

0000046e <TWI_Transmit_Addr>:

void TWI_Transmit_Addr(unsigned char data, unsigned char addr){
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	c8 2f       	mov	r28, r24
 474:	d6 2f       	mov	r29, r22
	TWI_Start();
 476:	e7 df       	rcall	.-50     	; 0x446 <TWI_Start>
	TWI_Transmit(addr);
 478:	8d 2f       	mov	r24, r29
 47a:	ee df       	rcall	.-36     	; 0x458 <TWI_Transmit>
	TWI_Transmit(data);
 47c:	8c 2f       	mov	r24, r28
 47e:	ec df       	rcall	.-40     	; 0x458 <TWI_Transmit>
 480:	84 e9       	ldi	r24, 0x94	; 148
	TWI_Stop();
}

void TWI_Stop(void) {
	// TWCR Register init
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
 482:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 486:	df 91       	pop	r29
void TWI_Transmit_Addr(unsigned char data, unsigned char addr){
	TWI_Start();
	TWI_Transmit(addr);
	TWI_Transmit(data);
	TWI_Stop();
}
 488:	cf 91       	pop	r28
 48a:	08 95       	ret

0000048c <__divsf3>:
 48c:	0c d0       	rcall	.+24     	; 0x4a6 <__divsf3x>
 48e:	ba c0       	rjmp	.+372    	; 0x604 <__fp_round>
 490:	b2 d0       	rcall	.+356    	; 0x5f6 <__fp_pscB>
 492:	40 f0       	brcs	.+16     	; 0x4a4 <__divsf3+0x18>
 494:	a9 d0       	rcall	.+338    	; 0x5e8 <__fp_pscA>
 496:	30 f0       	brcs	.+12     	; 0x4a4 <__divsf3+0x18>
 498:	21 f4       	brne	.+8      	; 0x4a2 <__divsf3+0x16>
 49a:	5f 3f       	cpi	r21, 0xFF	; 255
 49c:	19 f0       	breq	.+6      	; 0x4a4 <__divsf3+0x18>
 49e:	9b c0       	rjmp	.+310    	; 0x5d6 <__fp_inf>
 4a0:	51 11       	cpse	r21, r1
 4a2:	e4 c0       	rjmp	.+456    	; 0x66c <__fp_szero>
 4a4:	9e c0       	rjmp	.+316    	; 0x5e2 <__fp_nan>

000004a6 <__divsf3x>:
 4a6:	bf d0       	rcall	.+382    	; 0x626 <__fp_split3>
 4a8:	98 f3       	brcs	.-26     	; 0x490 <__divsf3+0x4>

000004aa <__divsf3_pse>:
 4aa:	99 23       	and	r25, r25
 4ac:	c9 f3       	breq	.-14     	; 0x4a0 <__divsf3+0x14>
 4ae:	55 23       	and	r21, r21
 4b0:	b1 f3       	breq	.-20     	; 0x49e <__divsf3+0x12>
 4b2:	95 1b       	sub	r25, r21
 4b4:	55 0b       	sbc	r21, r21
 4b6:	bb 27       	eor	r27, r27
 4b8:	aa 27       	eor	r26, r26
 4ba:	62 17       	cp	r22, r18
 4bc:	73 07       	cpc	r23, r19
 4be:	84 07       	cpc	r24, r20
 4c0:	38 f0       	brcs	.+14     	; 0x4d0 <__divsf3_pse+0x26>
 4c2:	9f 5f       	subi	r25, 0xFF	; 255
 4c4:	5f 4f       	sbci	r21, 0xFF	; 255
 4c6:	22 0f       	add	r18, r18
 4c8:	33 1f       	adc	r19, r19
 4ca:	44 1f       	adc	r20, r20
 4cc:	aa 1f       	adc	r26, r26
 4ce:	a9 f3       	breq	.-22     	; 0x4ba <__divsf3_pse+0x10>
 4d0:	33 d0       	rcall	.+102    	; 0x538 <__divsf3_pse+0x8e>
 4d2:	0e 2e       	mov	r0, r30
 4d4:	3a f0       	brmi	.+14     	; 0x4e4 <__divsf3_pse+0x3a>
 4d6:	e0 e8       	ldi	r30, 0x80	; 128
 4d8:	30 d0       	rcall	.+96     	; 0x53a <__divsf3_pse+0x90>
 4da:	91 50       	subi	r25, 0x01	; 1
 4dc:	50 40       	sbci	r21, 0x00	; 0
 4de:	e6 95       	lsr	r30
 4e0:	00 1c       	adc	r0, r0
 4e2:	ca f7       	brpl	.-14     	; 0x4d6 <__divsf3_pse+0x2c>
 4e4:	29 d0       	rcall	.+82     	; 0x538 <__divsf3_pse+0x8e>
 4e6:	fe 2f       	mov	r31, r30
 4e8:	27 d0       	rcall	.+78     	; 0x538 <__divsf3_pse+0x8e>
 4ea:	66 0f       	add	r22, r22
 4ec:	77 1f       	adc	r23, r23
 4ee:	88 1f       	adc	r24, r24
 4f0:	bb 1f       	adc	r27, r27
 4f2:	26 17       	cp	r18, r22
 4f4:	37 07       	cpc	r19, r23
 4f6:	48 07       	cpc	r20, r24
 4f8:	ab 07       	cpc	r26, r27
 4fa:	b0 e8       	ldi	r27, 0x80	; 128
 4fc:	09 f0       	breq	.+2      	; 0x500 <__divsf3_pse+0x56>
 4fe:	bb 0b       	sbc	r27, r27
 500:	80 2d       	mov	r24, r0
 502:	bf 01       	movw	r22, r30
 504:	ff 27       	eor	r31, r31
 506:	93 58       	subi	r25, 0x83	; 131
 508:	5f 4f       	sbci	r21, 0xFF	; 255
 50a:	2a f0       	brmi	.+10     	; 0x516 <__divsf3_pse+0x6c>
 50c:	9e 3f       	cpi	r25, 0xFE	; 254
 50e:	51 05       	cpc	r21, r1
 510:	68 f0       	brcs	.+26     	; 0x52c <__divsf3_pse+0x82>
 512:	61 c0       	rjmp	.+194    	; 0x5d6 <__fp_inf>
 514:	ab c0       	rjmp	.+342    	; 0x66c <__fp_szero>
 516:	5f 3f       	cpi	r21, 0xFF	; 255
 518:	ec f3       	brlt	.-6      	; 0x514 <__divsf3_pse+0x6a>
 51a:	98 3e       	cpi	r25, 0xE8	; 232
 51c:	dc f3       	brlt	.-10     	; 0x514 <__divsf3_pse+0x6a>
 51e:	86 95       	lsr	r24
 520:	77 95       	ror	r23
 522:	67 95       	ror	r22
 524:	b7 95       	ror	r27
 526:	f7 95       	ror	r31
 528:	9f 5f       	subi	r25, 0xFF	; 255
 52a:	c9 f7       	brne	.-14     	; 0x51e <__divsf3_pse+0x74>
 52c:	88 0f       	add	r24, r24
 52e:	91 1d       	adc	r25, r1
 530:	96 95       	lsr	r25
 532:	87 95       	ror	r24
 534:	97 f9       	bld	r25, 7
 536:	08 95       	ret
 538:	e1 e0       	ldi	r30, 0x01	; 1
 53a:	66 0f       	add	r22, r22
 53c:	77 1f       	adc	r23, r23
 53e:	88 1f       	adc	r24, r24
 540:	bb 1f       	adc	r27, r27
 542:	62 17       	cp	r22, r18
 544:	73 07       	cpc	r23, r19
 546:	84 07       	cpc	r24, r20
 548:	ba 07       	cpc	r27, r26
 54a:	20 f0       	brcs	.+8      	; 0x554 <__divsf3_pse+0xaa>
 54c:	62 1b       	sub	r22, r18
 54e:	73 0b       	sbc	r23, r19
 550:	84 0b       	sbc	r24, r20
 552:	ba 0b       	sbc	r27, r26
 554:	ee 1f       	adc	r30, r30
 556:	88 f7       	brcc	.-30     	; 0x53a <__divsf3_pse+0x90>
 558:	e0 95       	com	r30
 55a:	08 95       	ret

0000055c <__floatunsisf>:
 55c:	e8 94       	clt
 55e:	09 c0       	rjmp	.+18     	; 0x572 <__floatsisf+0x12>

00000560 <__floatsisf>:
 560:	97 fb       	bst	r25, 7
 562:	3e f4       	brtc	.+14     	; 0x572 <__floatsisf+0x12>
 564:	90 95       	com	r25
 566:	80 95       	com	r24
 568:	70 95       	com	r23
 56a:	61 95       	neg	r22
 56c:	7f 4f       	sbci	r23, 0xFF	; 255
 56e:	8f 4f       	sbci	r24, 0xFF	; 255
 570:	9f 4f       	sbci	r25, 0xFF	; 255
 572:	99 23       	and	r25, r25
 574:	a9 f0       	breq	.+42     	; 0x5a0 <__floatsisf+0x40>
 576:	f9 2f       	mov	r31, r25
 578:	96 e9       	ldi	r25, 0x96	; 150
 57a:	bb 27       	eor	r27, r27
 57c:	93 95       	inc	r25
 57e:	f6 95       	lsr	r31
 580:	87 95       	ror	r24
 582:	77 95       	ror	r23
 584:	67 95       	ror	r22
 586:	b7 95       	ror	r27
 588:	f1 11       	cpse	r31, r1
 58a:	f8 cf       	rjmp	.-16     	; 0x57c <__floatsisf+0x1c>
 58c:	fa f4       	brpl	.+62     	; 0x5cc <__floatsisf+0x6c>
 58e:	bb 0f       	add	r27, r27
 590:	11 f4       	brne	.+4      	; 0x596 <__floatsisf+0x36>
 592:	60 ff       	sbrs	r22, 0
 594:	1b c0       	rjmp	.+54     	; 0x5cc <__floatsisf+0x6c>
 596:	6f 5f       	subi	r22, 0xFF	; 255
 598:	7f 4f       	sbci	r23, 0xFF	; 255
 59a:	8f 4f       	sbci	r24, 0xFF	; 255
 59c:	9f 4f       	sbci	r25, 0xFF	; 255
 59e:	16 c0       	rjmp	.+44     	; 0x5cc <__floatsisf+0x6c>
 5a0:	88 23       	and	r24, r24
 5a2:	11 f0       	breq	.+4      	; 0x5a8 <__floatsisf+0x48>
 5a4:	96 e9       	ldi	r25, 0x96	; 150
 5a6:	11 c0       	rjmp	.+34     	; 0x5ca <__floatsisf+0x6a>
 5a8:	77 23       	and	r23, r23
 5aa:	21 f0       	breq	.+8      	; 0x5b4 <__floatsisf+0x54>
 5ac:	9e e8       	ldi	r25, 0x8E	; 142
 5ae:	87 2f       	mov	r24, r23
 5b0:	76 2f       	mov	r23, r22
 5b2:	05 c0       	rjmp	.+10     	; 0x5be <__floatsisf+0x5e>
 5b4:	66 23       	and	r22, r22
 5b6:	71 f0       	breq	.+28     	; 0x5d4 <__floatsisf+0x74>
 5b8:	96 e8       	ldi	r25, 0x86	; 134
 5ba:	86 2f       	mov	r24, r22
 5bc:	70 e0       	ldi	r23, 0x00	; 0
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	2a f0       	brmi	.+10     	; 0x5cc <__floatsisf+0x6c>
 5c2:	9a 95       	dec	r25
 5c4:	66 0f       	add	r22, r22
 5c6:	77 1f       	adc	r23, r23
 5c8:	88 1f       	adc	r24, r24
 5ca:	da f7       	brpl	.-10     	; 0x5c2 <__floatsisf+0x62>
 5cc:	88 0f       	add	r24, r24
 5ce:	96 95       	lsr	r25
 5d0:	87 95       	ror	r24
 5d2:	97 f9       	bld	r25, 7
 5d4:	08 95       	ret

000005d6 <__fp_inf>:
 5d6:	97 f9       	bld	r25, 7
 5d8:	9f 67       	ori	r25, 0x7F	; 127
 5da:	80 e8       	ldi	r24, 0x80	; 128
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	60 e0       	ldi	r22, 0x00	; 0
 5e0:	08 95       	ret

000005e2 <__fp_nan>:
 5e2:	9f ef       	ldi	r25, 0xFF	; 255
 5e4:	80 ec       	ldi	r24, 0xC0	; 192
 5e6:	08 95       	ret

000005e8 <__fp_pscA>:
 5e8:	00 24       	eor	r0, r0
 5ea:	0a 94       	dec	r0
 5ec:	16 16       	cp	r1, r22
 5ee:	17 06       	cpc	r1, r23
 5f0:	18 06       	cpc	r1, r24
 5f2:	09 06       	cpc	r0, r25
 5f4:	08 95       	ret

000005f6 <__fp_pscB>:
 5f6:	00 24       	eor	r0, r0
 5f8:	0a 94       	dec	r0
 5fa:	12 16       	cp	r1, r18
 5fc:	13 06       	cpc	r1, r19
 5fe:	14 06       	cpc	r1, r20
 600:	05 06       	cpc	r0, r21
 602:	08 95       	ret

00000604 <__fp_round>:
 604:	09 2e       	mov	r0, r25
 606:	03 94       	inc	r0
 608:	00 0c       	add	r0, r0
 60a:	11 f4       	brne	.+4      	; 0x610 <__fp_round+0xc>
 60c:	88 23       	and	r24, r24
 60e:	52 f0       	brmi	.+20     	; 0x624 <__fp_round+0x20>
 610:	bb 0f       	add	r27, r27
 612:	40 f4       	brcc	.+16     	; 0x624 <__fp_round+0x20>
 614:	bf 2b       	or	r27, r31
 616:	11 f4       	brne	.+4      	; 0x61c <__fp_round+0x18>
 618:	60 ff       	sbrs	r22, 0
 61a:	04 c0       	rjmp	.+8      	; 0x624 <__fp_round+0x20>
 61c:	6f 5f       	subi	r22, 0xFF	; 255
 61e:	7f 4f       	sbci	r23, 0xFF	; 255
 620:	8f 4f       	sbci	r24, 0xFF	; 255
 622:	9f 4f       	sbci	r25, 0xFF	; 255
 624:	08 95       	ret

00000626 <__fp_split3>:
 626:	57 fd       	sbrc	r21, 7
 628:	90 58       	subi	r25, 0x80	; 128
 62a:	44 0f       	add	r20, r20
 62c:	55 1f       	adc	r21, r21
 62e:	59 f0       	breq	.+22     	; 0x646 <__fp_splitA+0x10>
 630:	5f 3f       	cpi	r21, 0xFF	; 255
 632:	71 f0       	breq	.+28     	; 0x650 <__fp_splitA+0x1a>
 634:	47 95       	ror	r20

00000636 <__fp_splitA>:
 636:	88 0f       	add	r24, r24
 638:	97 fb       	bst	r25, 7
 63a:	99 1f       	adc	r25, r25
 63c:	61 f0       	breq	.+24     	; 0x656 <__fp_splitA+0x20>
 63e:	9f 3f       	cpi	r25, 0xFF	; 255
 640:	79 f0       	breq	.+30     	; 0x660 <__fp_splitA+0x2a>
 642:	87 95       	ror	r24
 644:	08 95       	ret
 646:	12 16       	cp	r1, r18
 648:	13 06       	cpc	r1, r19
 64a:	14 06       	cpc	r1, r20
 64c:	55 1f       	adc	r21, r21
 64e:	f2 cf       	rjmp	.-28     	; 0x634 <__fp_split3+0xe>
 650:	46 95       	lsr	r20
 652:	f1 df       	rcall	.-30     	; 0x636 <__fp_splitA>
 654:	08 c0       	rjmp	.+16     	; 0x666 <__fp_splitA+0x30>
 656:	16 16       	cp	r1, r22
 658:	17 06       	cpc	r1, r23
 65a:	18 06       	cpc	r1, r24
 65c:	99 1f       	adc	r25, r25
 65e:	f1 cf       	rjmp	.-30     	; 0x642 <__fp_splitA+0xc>
 660:	86 95       	lsr	r24
 662:	71 05       	cpc	r23, r1
 664:	61 05       	cpc	r22, r1
 666:	08 94       	sec
 668:	08 95       	ret

0000066a <__fp_zero>:
 66a:	e8 94       	clt

0000066c <__fp_szero>:
 66c:	bb 27       	eor	r27, r27
 66e:	66 27       	eor	r22, r22
 670:	77 27       	eor	r23, r23
 672:	cb 01       	movw	r24, r22
 674:	97 f9       	bld	r25, 7
 676:	08 95       	ret

00000678 <sprintf>:
 678:	ae e0       	ldi	r26, 0x0E	; 14
 67a:	b0 e0       	ldi	r27, 0x00	; 0
 67c:	e1 e4       	ldi	r30, 0x41	; 65
 67e:	f3 e0       	ldi	r31, 0x03	; 3
 680:	aa c2       	rjmp	.+1364   	; 0xbd6 <__prologue_saves__+0x1c>
 682:	0d 89       	ldd	r16, Y+21	; 0x15
 684:	1e 89       	ldd	r17, Y+22	; 0x16
 686:	86 e0       	ldi	r24, 0x06	; 6
 688:	8c 83       	std	Y+4, r24	; 0x04
 68a:	1a 83       	std	Y+2, r17	; 0x02
 68c:	09 83       	std	Y+1, r16	; 0x01
 68e:	8f ef       	ldi	r24, 0xFF	; 255
 690:	9f e7       	ldi	r25, 0x7F	; 127
 692:	9e 83       	std	Y+6, r25	; 0x06
 694:	8d 83       	std	Y+5, r24	; 0x05
 696:	ae 01       	movw	r20, r28
 698:	47 5e       	subi	r20, 0xE7	; 231
 69a:	5f 4f       	sbci	r21, 0xFF	; 255
 69c:	6f 89       	ldd	r22, Y+23	; 0x17
 69e:	78 8d       	ldd	r23, Y+24	; 0x18
 6a0:	ce 01       	movw	r24, r28
 6a2:	01 96       	adiw	r24, 0x01	; 1
 6a4:	08 d0       	rcall	.+16     	; 0x6b6 <vfprintf>
 6a6:	ef 81       	ldd	r30, Y+7	; 0x07
 6a8:	f8 85       	ldd	r31, Y+8	; 0x08
 6aa:	e0 0f       	add	r30, r16
 6ac:	f1 1f       	adc	r31, r17
 6ae:	10 82       	st	Z, r1
 6b0:	2e 96       	adiw	r28, 0x0e	; 14
 6b2:	e4 e0       	ldi	r30, 0x04	; 4
 6b4:	ac c2       	rjmp	.+1368   	; 0xc0e <__epilogue_restores__+0x1c>

000006b6 <vfprintf>:
 6b6:	ab e0       	ldi	r26, 0x0B	; 11
 6b8:	b0 e0       	ldi	r27, 0x00	; 0
 6ba:	e0 e6       	ldi	r30, 0x60	; 96
 6bc:	f3 e0       	ldi	r31, 0x03	; 3
 6be:	7d c2       	rjmp	.+1274   	; 0xbba <__prologue_saves__>
 6c0:	6c 01       	movw	r12, r24
 6c2:	7b 01       	movw	r14, r22
 6c4:	8a 01       	movw	r16, r20
 6c6:	fc 01       	movw	r30, r24
 6c8:	17 82       	std	Z+7, r1	; 0x07
 6ca:	16 82       	std	Z+6, r1	; 0x06
 6cc:	83 81       	ldd	r24, Z+3	; 0x03
 6ce:	81 ff       	sbrs	r24, 1
 6d0:	bf c1       	rjmp	.+894    	; 0xa50 <__stack+0x151>
 6d2:	ce 01       	movw	r24, r28
 6d4:	01 96       	adiw	r24, 0x01	; 1
 6d6:	3c 01       	movw	r6, r24
 6d8:	f6 01       	movw	r30, r12
 6da:	93 81       	ldd	r25, Z+3	; 0x03
 6dc:	f7 01       	movw	r30, r14
 6de:	93 fd       	sbrc	r25, 3
 6e0:	85 91       	lpm	r24, Z+
 6e2:	93 ff       	sbrs	r25, 3
 6e4:	81 91       	ld	r24, Z+
 6e6:	7f 01       	movw	r14, r30
 6e8:	88 23       	and	r24, r24
 6ea:	09 f4       	brne	.+2      	; 0x6ee <vfprintf+0x38>
 6ec:	ad c1       	rjmp	.+858    	; 0xa48 <__stack+0x149>
 6ee:	85 32       	cpi	r24, 0x25	; 37
 6f0:	39 f4       	brne	.+14     	; 0x700 <vfprintf+0x4a>
 6f2:	93 fd       	sbrc	r25, 3
 6f4:	85 91       	lpm	r24, Z+
 6f6:	93 ff       	sbrs	r25, 3
 6f8:	81 91       	ld	r24, Z+
 6fa:	7f 01       	movw	r14, r30
 6fc:	85 32       	cpi	r24, 0x25	; 37
 6fe:	21 f4       	brne	.+8      	; 0x708 <vfprintf+0x52>
 700:	b6 01       	movw	r22, r12
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	c0 d1       	rcall	.+896    	; 0xa86 <fputc>
 706:	e8 cf       	rjmp	.-48     	; 0x6d8 <vfprintf+0x22>
 708:	91 2c       	mov	r9, r1
 70a:	21 2c       	mov	r2, r1
 70c:	31 2c       	mov	r3, r1
 70e:	ff e1       	ldi	r31, 0x1F	; 31
 710:	f3 15       	cp	r31, r3
 712:	d8 f0       	brcs	.+54     	; 0x74a <vfprintf+0x94>
 714:	8b 32       	cpi	r24, 0x2B	; 43
 716:	79 f0       	breq	.+30     	; 0x736 <vfprintf+0x80>
 718:	38 f4       	brcc	.+14     	; 0x728 <vfprintf+0x72>
 71a:	80 32       	cpi	r24, 0x20	; 32
 71c:	79 f0       	breq	.+30     	; 0x73c <vfprintf+0x86>
 71e:	83 32       	cpi	r24, 0x23	; 35
 720:	a1 f4       	brne	.+40     	; 0x74a <vfprintf+0x94>
 722:	23 2d       	mov	r18, r3
 724:	20 61       	ori	r18, 0x10	; 16
 726:	1d c0       	rjmp	.+58     	; 0x762 <vfprintf+0xac>
 728:	8d 32       	cpi	r24, 0x2D	; 45
 72a:	61 f0       	breq	.+24     	; 0x744 <vfprintf+0x8e>
 72c:	80 33       	cpi	r24, 0x30	; 48
 72e:	69 f4       	brne	.+26     	; 0x74a <vfprintf+0x94>
 730:	23 2d       	mov	r18, r3
 732:	21 60       	ori	r18, 0x01	; 1
 734:	16 c0       	rjmp	.+44     	; 0x762 <vfprintf+0xac>
 736:	83 2d       	mov	r24, r3
 738:	82 60       	ori	r24, 0x02	; 2
 73a:	38 2e       	mov	r3, r24
 73c:	e3 2d       	mov	r30, r3
 73e:	e4 60       	ori	r30, 0x04	; 4
 740:	3e 2e       	mov	r3, r30
 742:	2a c0       	rjmp	.+84     	; 0x798 <vfprintf+0xe2>
 744:	f3 2d       	mov	r31, r3
 746:	f8 60       	ori	r31, 0x08	; 8
 748:	1d c0       	rjmp	.+58     	; 0x784 <vfprintf+0xce>
 74a:	37 fc       	sbrc	r3, 7
 74c:	2d c0       	rjmp	.+90     	; 0x7a8 <vfprintf+0xf2>
 74e:	20 ed       	ldi	r18, 0xD0	; 208
 750:	28 0f       	add	r18, r24
 752:	2a 30       	cpi	r18, 0x0A	; 10
 754:	40 f0       	brcs	.+16     	; 0x766 <vfprintf+0xb0>
 756:	8e 32       	cpi	r24, 0x2E	; 46
 758:	b9 f4       	brne	.+46     	; 0x788 <vfprintf+0xd2>
 75a:	36 fc       	sbrc	r3, 6
 75c:	75 c1       	rjmp	.+746    	; 0xa48 <__stack+0x149>
 75e:	23 2d       	mov	r18, r3
 760:	20 64       	ori	r18, 0x40	; 64
 762:	32 2e       	mov	r3, r18
 764:	19 c0       	rjmp	.+50     	; 0x798 <vfprintf+0xe2>
 766:	36 fe       	sbrs	r3, 6
 768:	06 c0       	rjmp	.+12     	; 0x776 <vfprintf+0xc0>
 76a:	8a e0       	ldi	r24, 0x0A	; 10
 76c:	98 9e       	mul	r9, r24
 76e:	20 0d       	add	r18, r0
 770:	11 24       	eor	r1, r1
 772:	92 2e       	mov	r9, r18
 774:	11 c0       	rjmp	.+34     	; 0x798 <vfprintf+0xe2>
 776:	ea e0       	ldi	r30, 0x0A	; 10
 778:	2e 9e       	mul	r2, r30
 77a:	20 0d       	add	r18, r0
 77c:	11 24       	eor	r1, r1
 77e:	22 2e       	mov	r2, r18
 780:	f3 2d       	mov	r31, r3
 782:	f0 62       	ori	r31, 0x20	; 32
 784:	3f 2e       	mov	r3, r31
 786:	08 c0       	rjmp	.+16     	; 0x798 <vfprintf+0xe2>
 788:	8c 36       	cpi	r24, 0x6C	; 108
 78a:	21 f4       	brne	.+8      	; 0x794 <vfprintf+0xde>
 78c:	83 2d       	mov	r24, r3
 78e:	80 68       	ori	r24, 0x80	; 128
 790:	38 2e       	mov	r3, r24
 792:	02 c0       	rjmp	.+4      	; 0x798 <vfprintf+0xe2>
 794:	88 36       	cpi	r24, 0x68	; 104
 796:	41 f4       	brne	.+16     	; 0x7a8 <vfprintf+0xf2>
 798:	f7 01       	movw	r30, r14
 79a:	93 fd       	sbrc	r25, 3
 79c:	85 91       	lpm	r24, Z+
 79e:	93 ff       	sbrs	r25, 3
 7a0:	81 91       	ld	r24, Z+
 7a2:	7f 01       	movw	r14, r30
 7a4:	81 11       	cpse	r24, r1
 7a6:	b3 cf       	rjmp	.-154    	; 0x70e <vfprintf+0x58>
 7a8:	98 2f       	mov	r25, r24
 7aa:	9f 7d       	andi	r25, 0xDF	; 223
 7ac:	95 54       	subi	r25, 0x45	; 69
 7ae:	93 30       	cpi	r25, 0x03	; 3
 7b0:	28 f4       	brcc	.+10     	; 0x7bc <vfprintf+0x106>
 7b2:	0c 5f       	subi	r16, 0xFC	; 252
 7b4:	1f 4f       	sbci	r17, 0xFF	; 255
 7b6:	9f e3       	ldi	r25, 0x3F	; 63
 7b8:	99 83       	std	Y+1, r25	; 0x01
 7ba:	0d c0       	rjmp	.+26     	; 0x7d6 <vfprintf+0x120>
 7bc:	83 36       	cpi	r24, 0x63	; 99
 7be:	31 f0       	breq	.+12     	; 0x7cc <vfprintf+0x116>
 7c0:	83 37       	cpi	r24, 0x73	; 115
 7c2:	71 f0       	breq	.+28     	; 0x7e0 <vfprintf+0x12a>
 7c4:	83 35       	cpi	r24, 0x53	; 83
 7c6:	09 f0       	breq	.+2      	; 0x7ca <vfprintf+0x114>
 7c8:	55 c0       	rjmp	.+170    	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 7ca:	20 c0       	rjmp	.+64     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7cc:	f8 01       	movw	r30, r16
 7ce:	80 81       	ld	r24, Z
 7d0:	89 83       	std	Y+1, r24	; 0x01
 7d2:	0e 5f       	subi	r16, 0xFE	; 254
 7d4:	1f 4f       	sbci	r17, 0xFF	; 255
 7d6:	88 24       	eor	r8, r8
 7d8:	83 94       	inc	r8
 7da:	91 2c       	mov	r9, r1
 7dc:	53 01       	movw	r10, r6
 7de:	12 c0       	rjmp	.+36     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7e0:	28 01       	movw	r4, r16
 7e2:	f2 e0       	ldi	r31, 0x02	; 2
 7e4:	4f 0e       	add	r4, r31
 7e6:	51 1c       	adc	r5, r1
 7e8:	f8 01       	movw	r30, r16
 7ea:	a0 80       	ld	r10, Z
 7ec:	b1 80       	ldd	r11, Z+1	; 0x01
 7ee:	36 fe       	sbrs	r3, 6
 7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <vfprintf+0x142>
 7f2:	69 2d       	mov	r22, r9
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <vfprintf+0x146>
 7f8:	6f ef       	ldi	r22, 0xFF	; 255
 7fa:	7f ef       	ldi	r23, 0xFF	; 255
 7fc:	c5 01       	movw	r24, r10
 7fe:	38 d1       	rcall	.+624    	; 0xa70 <strnlen>
 800:	4c 01       	movw	r8, r24
 802:	82 01       	movw	r16, r4
 804:	f3 2d       	mov	r31, r3
 806:	ff 77       	andi	r31, 0x7F	; 127
 808:	3f 2e       	mov	r3, r31
 80a:	15 c0       	rjmp	.+42     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 80c:	28 01       	movw	r4, r16
 80e:	22 e0       	ldi	r18, 0x02	; 2
 810:	42 0e       	add	r4, r18
 812:	51 1c       	adc	r5, r1
 814:	f8 01       	movw	r30, r16
 816:	a0 80       	ld	r10, Z
 818:	b1 80       	ldd	r11, Z+1	; 0x01
 81a:	36 fe       	sbrs	r3, 6
 81c:	03 c0       	rjmp	.+6      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 81e:	69 2d       	mov	r22, r9
 820:	70 e0       	ldi	r23, 0x00	; 0
 822:	02 c0       	rjmp	.+4      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 824:	6f ef       	ldi	r22, 0xFF	; 255
 826:	7f ef       	ldi	r23, 0xFF	; 255
 828:	c5 01       	movw	r24, r10
 82a:	17 d1       	rcall	.+558    	; 0xa5a <strnlen_P>
 82c:	4c 01       	movw	r8, r24
 82e:	f3 2d       	mov	r31, r3
 830:	f0 68       	ori	r31, 0x80	; 128
 832:	3f 2e       	mov	r3, r31
 834:	82 01       	movw	r16, r4
 836:	33 fc       	sbrc	r3, 3
 838:	19 c0       	rjmp	.+50     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 83a:	82 2d       	mov	r24, r2
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	88 16       	cp	r8, r24
 840:	99 06       	cpc	r9, r25
 842:	a0 f4       	brcc	.+40     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 844:	b6 01       	movw	r22, r12
 846:	80 e2       	ldi	r24, 0x20	; 32
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	1d d1       	rcall	.+570    	; 0xa86 <fputc>
 84c:	2a 94       	dec	r2
 84e:	f5 cf       	rjmp	.-22     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 850:	f5 01       	movw	r30, r10
 852:	37 fc       	sbrc	r3, 7
 854:	85 91       	lpm	r24, Z+
 856:	37 fe       	sbrs	r3, 7
 858:	81 91       	ld	r24, Z+
 85a:	5f 01       	movw	r10, r30
 85c:	b6 01       	movw	r22, r12
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	12 d1       	rcall	.+548    	; 0xa86 <fputc>
 862:	21 10       	cpse	r2, r1
 864:	2a 94       	dec	r2
 866:	21 e0       	ldi	r18, 0x01	; 1
 868:	82 1a       	sub	r8, r18
 86a:	91 08       	sbc	r9, r1
 86c:	81 14       	cp	r8, r1
 86e:	91 04       	cpc	r9, r1
 870:	79 f7       	brne	.-34     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 872:	e1 c0       	rjmp	.+450    	; 0xa36 <__stack+0x137>
 874:	84 36       	cpi	r24, 0x64	; 100
 876:	11 f0       	breq	.+4      	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
 878:	89 36       	cpi	r24, 0x69	; 105
 87a:	39 f5       	brne	.+78     	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 87c:	f8 01       	movw	r30, r16
 87e:	37 fe       	sbrs	r3, 7
 880:	07 c0       	rjmp	.+14     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 882:	60 81       	ld	r22, Z
 884:	71 81       	ldd	r23, Z+1	; 0x01
 886:	82 81       	ldd	r24, Z+2	; 0x02
 888:	93 81       	ldd	r25, Z+3	; 0x03
 88a:	0c 5f       	subi	r16, 0xFC	; 252
 88c:	1f 4f       	sbci	r17, 0xFF	; 255
 88e:	08 c0       	rjmp	.+16     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 890:	60 81       	ld	r22, Z
 892:	71 81       	ldd	r23, Z+1	; 0x01
 894:	07 2e       	mov	r0, r23
 896:	00 0c       	add	r0, r0
 898:	88 0b       	sbc	r24, r24
 89a:	99 0b       	sbc	r25, r25
 89c:	0e 5f       	subi	r16, 0xFE	; 254
 89e:	1f 4f       	sbci	r17, 0xFF	; 255
 8a0:	f3 2d       	mov	r31, r3
 8a2:	ff 76       	andi	r31, 0x6F	; 111
 8a4:	3f 2e       	mov	r3, r31
 8a6:	97 ff       	sbrs	r25, 7
 8a8:	09 c0       	rjmp	.+18     	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
 8aa:	90 95       	com	r25
 8ac:	80 95       	com	r24
 8ae:	70 95       	com	r23
 8b0:	61 95       	neg	r22
 8b2:	7f 4f       	sbci	r23, 0xFF	; 255
 8b4:	8f 4f       	sbci	r24, 0xFF	; 255
 8b6:	9f 4f       	sbci	r25, 0xFF	; 255
 8b8:	f0 68       	ori	r31, 0x80	; 128
 8ba:	3f 2e       	mov	r3, r31
 8bc:	2a e0       	ldi	r18, 0x0A	; 10
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	a3 01       	movw	r20, r6
 8c2:	1d d1       	rcall	.+570    	; 0xafe <__ultoa_invert>
 8c4:	88 2e       	mov	r8, r24
 8c6:	86 18       	sub	r8, r6
 8c8:	44 c0       	rjmp	.+136    	; 0x952 <__stack+0x53>
 8ca:	85 37       	cpi	r24, 0x75	; 117
 8cc:	31 f4       	brne	.+12     	; 0x8da <__DATA_REGION_LENGTH__+0xda>
 8ce:	23 2d       	mov	r18, r3
 8d0:	2f 7e       	andi	r18, 0xEF	; 239
 8d2:	b2 2e       	mov	r11, r18
 8d4:	2a e0       	ldi	r18, 0x0A	; 10
 8d6:	30 e0       	ldi	r19, 0x00	; 0
 8d8:	25 c0       	rjmp	.+74     	; 0x924 <__stack+0x25>
 8da:	93 2d       	mov	r25, r3
 8dc:	99 7f       	andi	r25, 0xF9	; 249
 8de:	b9 2e       	mov	r11, r25
 8e0:	8f 36       	cpi	r24, 0x6F	; 111
 8e2:	c1 f0       	breq	.+48     	; 0x914 <__stack+0x15>
 8e4:	18 f4       	brcc	.+6      	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
 8e6:	88 35       	cpi	r24, 0x58	; 88
 8e8:	79 f0       	breq	.+30     	; 0x908 <__stack+0x9>
 8ea:	ae c0       	rjmp	.+348    	; 0xa48 <__stack+0x149>
 8ec:	80 37       	cpi	r24, 0x70	; 112
 8ee:	19 f0       	breq	.+6      	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
 8f0:	88 37       	cpi	r24, 0x78	; 120
 8f2:	21 f0       	breq	.+8      	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 8f4:	a9 c0       	rjmp	.+338    	; 0xa48 <__stack+0x149>
 8f6:	e9 2f       	mov	r30, r25
 8f8:	e0 61       	ori	r30, 0x10	; 16
 8fa:	be 2e       	mov	r11, r30
 8fc:	b4 fe       	sbrs	r11, 4
 8fe:	0d c0       	rjmp	.+26     	; 0x91a <__stack+0x1b>
 900:	fb 2d       	mov	r31, r11
 902:	f4 60       	ori	r31, 0x04	; 4
 904:	bf 2e       	mov	r11, r31
 906:	09 c0       	rjmp	.+18     	; 0x91a <__stack+0x1b>
 908:	34 fe       	sbrs	r3, 4
 90a:	0a c0       	rjmp	.+20     	; 0x920 <__stack+0x21>
 90c:	29 2f       	mov	r18, r25
 90e:	26 60       	ori	r18, 0x06	; 6
 910:	b2 2e       	mov	r11, r18
 912:	06 c0       	rjmp	.+12     	; 0x920 <__stack+0x21>
 914:	28 e0       	ldi	r18, 0x08	; 8
 916:	30 e0       	ldi	r19, 0x00	; 0
 918:	05 c0       	rjmp	.+10     	; 0x924 <__stack+0x25>
 91a:	20 e1       	ldi	r18, 0x10	; 16
 91c:	30 e0       	ldi	r19, 0x00	; 0
 91e:	02 c0       	rjmp	.+4      	; 0x924 <__stack+0x25>
 920:	20 e1       	ldi	r18, 0x10	; 16
 922:	32 e0       	ldi	r19, 0x02	; 2
 924:	f8 01       	movw	r30, r16
 926:	b7 fe       	sbrs	r11, 7
 928:	07 c0       	rjmp	.+14     	; 0x938 <__stack+0x39>
 92a:	60 81       	ld	r22, Z
 92c:	71 81       	ldd	r23, Z+1	; 0x01
 92e:	82 81       	ldd	r24, Z+2	; 0x02
 930:	93 81       	ldd	r25, Z+3	; 0x03
 932:	0c 5f       	subi	r16, 0xFC	; 252
 934:	1f 4f       	sbci	r17, 0xFF	; 255
 936:	06 c0       	rjmp	.+12     	; 0x944 <__stack+0x45>
 938:	60 81       	ld	r22, Z
 93a:	71 81       	ldd	r23, Z+1	; 0x01
 93c:	80 e0       	ldi	r24, 0x00	; 0
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	0e 5f       	subi	r16, 0xFE	; 254
 942:	1f 4f       	sbci	r17, 0xFF	; 255
 944:	a3 01       	movw	r20, r6
 946:	db d0       	rcall	.+438    	; 0xafe <__ultoa_invert>
 948:	88 2e       	mov	r8, r24
 94a:	86 18       	sub	r8, r6
 94c:	fb 2d       	mov	r31, r11
 94e:	ff 77       	andi	r31, 0x7F	; 127
 950:	3f 2e       	mov	r3, r31
 952:	36 fe       	sbrs	r3, 6
 954:	0d c0       	rjmp	.+26     	; 0x970 <__stack+0x71>
 956:	23 2d       	mov	r18, r3
 958:	2e 7f       	andi	r18, 0xFE	; 254
 95a:	a2 2e       	mov	r10, r18
 95c:	89 14       	cp	r8, r9
 95e:	58 f4       	brcc	.+22     	; 0x976 <__stack+0x77>
 960:	34 fe       	sbrs	r3, 4
 962:	0b c0       	rjmp	.+22     	; 0x97a <__stack+0x7b>
 964:	32 fc       	sbrc	r3, 2
 966:	09 c0       	rjmp	.+18     	; 0x97a <__stack+0x7b>
 968:	83 2d       	mov	r24, r3
 96a:	8e 7e       	andi	r24, 0xEE	; 238
 96c:	a8 2e       	mov	r10, r24
 96e:	05 c0       	rjmp	.+10     	; 0x97a <__stack+0x7b>
 970:	b8 2c       	mov	r11, r8
 972:	a3 2c       	mov	r10, r3
 974:	03 c0       	rjmp	.+6      	; 0x97c <__stack+0x7d>
 976:	b8 2c       	mov	r11, r8
 978:	01 c0       	rjmp	.+2      	; 0x97c <__stack+0x7d>
 97a:	b9 2c       	mov	r11, r9
 97c:	a4 fe       	sbrs	r10, 4
 97e:	0f c0       	rjmp	.+30     	; 0x99e <__stack+0x9f>
 980:	fe 01       	movw	r30, r28
 982:	e8 0d       	add	r30, r8
 984:	f1 1d       	adc	r31, r1
 986:	80 81       	ld	r24, Z
 988:	80 33       	cpi	r24, 0x30	; 48
 98a:	21 f4       	brne	.+8      	; 0x994 <__stack+0x95>
 98c:	9a 2d       	mov	r25, r10
 98e:	99 7e       	andi	r25, 0xE9	; 233
 990:	a9 2e       	mov	r10, r25
 992:	09 c0       	rjmp	.+18     	; 0x9a6 <__stack+0xa7>
 994:	a2 fe       	sbrs	r10, 2
 996:	06 c0       	rjmp	.+12     	; 0x9a4 <__stack+0xa5>
 998:	b3 94       	inc	r11
 99a:	b3 94       	inc	r11
 99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__stack+0xa7>
 99e:	8a 2d       	mov	r24, r10
 9a0:	86 78       	andi	r24, 0x86	; 134
 9a2:	09 f0       	breq	.+2      	; 0x9a6 <__stack+0xa7>
 9a4:	b3 94       	inc	r11
 9a6:	a3 fc       	sbrc	r10, 3
 9a8:	10 c0       	rjmp	.+32     	; 0x9ca <__stack+0xcb>
 9aa:	a0 fe       	sbrs	r10, 0
 9ac:	06 c0       	rjmp	.+12     	; 0x9ba <__stack+0xbb>
 9ae:	b2 14       	cp	r11, r2
 9b0:	80 f4       	brcc	.+32     	; 0x9d2 <__stack+0xd3>
 9b2:	28 0c       	add	r2, r8
 9b4:	92 2c       	mov	r9, r2
 9b6:	9b 18       	sub	r9, r11
 9b8:	0d c0       	rjmp	.+26     	; 0x9d4 <__stack+0xd5>
 9ba:	b2 14       	cp	r11, r2
 9bc:	58 f4       	brcc	.+22     	; 0x9d4 <__stack+0xd5>
 9be:	b6 01       	movw	r22, r12
 9c0:	80 e2       	ldi	r24, 0x20	; 32
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	60 d0       	rcall	.+192    	; 0xa86 <fputc>
 9c6:	b3 94       	inc	r11
 9c8:	f8 cf       	rjmp	.-16     	; 0x9ba <__stack+0xbb>
 9ca:	b2 14       	cp	r11, r2
 9cc:	18 f4       	brcc	.+6      	; 0x9d4 <__stack+0xd5>
 9ce:	2b 18       	sub	r2, r11
 9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <__stack+0xd7>
 9d2:	98 2c       	mov	r9, r8
 9d4:	21 2c       	mov	r2, r1
 9d6:	a4 fe       	sbrs	r10, 4
 9d8:	0f c0       	rjmp	.+30     	; 0x9f8 <__stack+0xf9>
 9da:	b6 01       	movw	r22, r12
 9dc:	80 e3       	ldi	r24, 0x30	; 48
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	52 d0       	rcall	.+164    	; 0xa86 <fputc>
 9e2:	a2 fe       	sbrs	r10, 2
 9e4:	16 c0       	rjmp	.+44     	; 0xa12 <__stack+0x113>
 9e6:	a1 fc       	sbrc	r10, 1
 9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <__stack+0xf1>
 9ea:	88 e7       	ldi	r24, 0x78	; 120
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <__stack+0xf5>
 9f0:	88 e5       	ldi	r24, 0x58	; 88
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	b6 01       	movw	r22, r12
 9f6:	0c c0       	rjmp	.+24     	; 0xa10 <__stack+0x111>
 9f8:	8a 2d       	mov	r24, r10
 9fa:	86 78       	andi	r24, 0x86	; 134
 9fc:	51 f0       	breq	.+20     	; 0xa12 <__stack+0x113>
 9fe:	a1 fe       	sbrs	r10, 1
 a00:	02 c0       	rjmp	.+4      	; 0xa06 <__stack+0x107>
 a02:	8b e2       	ldi	r24, 0x2B	; 43
 a04:	01 c0       	rjmp	.+2      	; 0xa08 <__stack+0x109>
 a06:	80 e2       	ldi	r24, 0x20	; 32
 a08:	a7 fc       	sbrc	r10, 7
 a0a:	8d e2       	ldi	r24, 0x2D	; 45
 a0c:	b6 01       	movw	r22, r12
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	3a d0       	rcall	.+116    	; 0xa86 <fputc>
 a12:	89 14       	cp	r8, r9
 a14:	30 f4       	brcc	.+12     	; 0xa22 <__stack+0x123>
 a16:	b6 01       	movw	r22, r12
 a18:	80 e3       	ldi	r24, 0x30	; 48
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	34 d0       	rcall	.+104    	; 0xa86 <fputc>
 a1e:	9a 94       	dec	r9
 a20:	f8 cf       	rjmp	.-16     	; 0xa12 <__stack+0x113>
 a22:	8a 94       	dec	r8
 a24:	f3 01       	movw	r30, r6
 a26:	e8 0d       	add	r30, r8
 a28:	f1 1d       	adc	r31, r1
 a2a:	80 81       	ld	r24, Z
 a2c:	b6 01       	movw	r22, r12
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	2a d0       	rcall	.+84     	; 0xa86 <fputc>
 a32:	81 10       	cpse	r8, r1
 a34:	f6 cf       	rjmp	.-20     	; 0xa22 <__stack+0x123>
 a36:	22 20       	and	r2, r2
 a38:	09 f4       	brne	.+2      	; 0xa3c <__stack+0x13d>
 a3a:	4e ce       	rjmp	.-868    	; 0x6d8 <vfprintf+0x22>
 a3c:	b6 01       	movw	r22, r12
 a3e:	80 e2       	ldi	r24, 0x20	; 32
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	21 d0       	rcall	.+66     	; 0xa86 <fputc>
 a44:	2a 94       	dec	r2
 a46:	f7 cf       	rjmp	.-18     	; 0xa36 <__stack+0x137>
 a48:	f6 01       	movw	r30, r12
 a4a:	86 81       	ldd	r24, Z+6	; 0x06
 a4c:	97 81       	ldd	r25, Z+7	; 0x07
 a4e:	02 c0       	rjmp	.+4      	; 0xa54 <__stack+0x155>
 a50:	8f ef       	ldi	r24, 0xFF	; 255
 a52:	9f ef       	ldi	r25, 0xFF	; 255
 a54:	2b 96       	adiw	r28, 0x0b	; 11
 a56:	e2 e1       	ldi	r30, 0x12	; 18
 a58:	cc c0       	rjmp	.+408    	; 0xbf2 <__epilogue_restores__>

00000a5a <strnlen_P>:
 a5a:	fc 01       	movw	r30, r24
 a5c:	05 90       	lpm	r0, Z+
 a5e:	61 50       	subi	r22, 0x01	; 1
 a60:	70 40       	sbci	r23, 0x00	; 0
 a62:	01 10       	cpse	r0, r1
 a64:	d8 f7       	brcc	.-10     	; 0xa5c <strnlen_P+0x2>
 a66:	80 95       	com	r24
 a68:	90 95       	com	r25
 a6a:	8e 0f       	add	r24, r30
 a6c:	9f 1f       	adc	r25, r31
 a6e:	08 95       	ret

00000a70 <strnlen>:
 a70:	fc 01       	movw	r30, r24
 a72:	61 50       	subi	r22, 0x01	; 1
 a74:	70 40       	sbci	r23, 0x00	; 0
 a76:	01 90       	ld	r0, Z+
 a78:	01 10       	cpse	r0, r1
 a7a:	d8 f7       	brcc	.-10     	; 0xa72 <strnlen+0x2>
 a7c:	80 95       	com	r24
 a7e:	90 95       	com	r25
 a80:	8e 0f       	add	r24, r30
 a82:	9f 1f       	adc	r25, r31
 a84:	08 95       	ret

00000a86 <fputc>:
 a86:	0f 93       	push	r16
 a88:	1f 93       	push	r17
 a8a:	cf 93       	push	r28
 a8c:	df 93       	push	r29
 a8e:	fb 01       	movw	r30, r22
 a90:	23 81       	ldd	r18, Z+3	; 0x03
 a92:	21 fd       	sbrc	r18, 1
 a94:	03 c0       	rjmp	.+6      	; 0xa9c <fputc+0x16>
 a96:	8f ef       	ldi	r24, 0xFF	; 255
 a98:	9f ef       	ldi	r25, 0xFF	; 255
 a9a:	2c c0       	rjmp	.+88     	; 0xaf4 <fputc+0x6e>
 a9c:	22 ff       	sbrs	r18, 2
 a9e:	16 c0       	rjmp	.+44     	; 0xacc <fputc+0x46>
 aa0:	46 81       	ldd	r20, Z+6	; 0x06
 aa2:	57 81       	ldd	r21, Z+7	; 0x07
 aa4:	24 81       	ldd	r18, Z+4	; 0x04
 aa6:	35 81       	ldd	r19, Z+5	; 0x05
 aa8:	42 17       	cp	r20, r18
 aaa:	53 07       	cpc	r21, r19
 aac:	44 f4       	brge	.+16     	; 0xabe <fputc+0x38>
 aae:	a0 81       	ld	r26, Z
 ab0:	b1 81       	ldd	r27, Z+1	; 0x01
 ab2:	9d 01       	movw	r18, r26
 ab4:	2f 5f       	subi	r18, 0xFF	; 255
 ab6:	3f 4f       	sbci	r19, 0xFF	; 255
 ab8:	31 83       	std	Z+1, r19	; 0x01
 aba:	20 83       	st	Z, r18
 abc:	8c 93       	st	X, r24
 abe:	26 81       	ldd	r18, Z+6	; 0x06
 ac0:	37 81       	ldd	r19, Z+7	; 0x07
 ac2:	2f 5f       	subi	r18, 0xFF	; 255
 ac4:	3f 4f       	sbci	r19, 0xFF	; 255
 ac6:	37 83       	std	Z+7, r19	; 0x07
 ac8:	26 83       	std	Z+6, r18	; 0x06
 aca:	14 c0       	rjmp	.+40     	; 0xaf4 <fputc+0x6e>
 acc:	8b 01       	movw	r16, r22
 ace:	ec 01       	movw	r28, r24
 ad0:	fb 01       	movw	r30, r22
 ad2:	00 84       	ldd	r0, Z+8	; 0x08
 ad4:	f1 85       	ldd	r31, Z+9	; 0x09
 ad6:	e0 2d       	mov	r30, r0
 ad8:	09 95       	icall
 ada:	89 2b       	or	r24, r25
 adc:	e1 f6       	brne	.-72     	; 0xa96 <fputc+0x10>
 ade:	d8 01       	movw	r26, r16
 ae0:	16 96       	adiw	r26, 0x06	; 6
 ae2:	8d 91       	ld	r24, X+
 ae4:	9c 91       	ld	r25, X
 ae6:	17 97       	sbiw	r26, 0x07	; 7
 ae8:	01 96       	adiw	r24, 0x01	; 1
 aea:	17 96       	adiw	r26, 0x07	; 7
 aec:	9c 93       	st	X, r25
 aee:	8e 93       	st	-X, r24
 af0:	16 97       	sbiw	r26, 0x06	; 6
 af2:	ce 01       	movw	r24, r28
 af4:	df 91       	pop	r29
 af6:	cf 91       	pop	r28
 af8:	1f 91       	pop	r17
 afa:	0f 91       	pop	r16
 afc:	08 95       	ret

00000afe <__ultoa_invert>:
 afe:	fa 01       	movw	r30, r20
 b00:	aa 27       	eor	r26, r26
 b02:	28 30       	cpi	r18, 0x08	; 8
 b04:	51 f1       	breq	.+84     	; 0xb5a <__ultoa_invert+0x5c>
 b06:	20 31       	cpi	r18, 0x10	; 16
 b08:	81 f1       	breq	.+96     	; 0xb6a <__ultoa_invert+0x6c>
 b0a:	e8 94       	clt
 b0c:	6f 93       	push	r22
 b0e:	6e 7f       	andi	r22, 0xFE	; 254
 b10:	6e 5f       	subi	r22, 0xFE	; 254
 b12:	7f 4f       	sbci	r23, 0xFF	; 255
 b14:	8f 4f       	sbci	r24, 0xFF	; 255
 b16:	9f 4f       	sbci	r25, 0xFF	; 255
 b18:	af 4f       	sbci	r26, 0xFF	; 255
 b1a:	b1 e0       	ldi	r27, 0x01	; 1
 b1c:	3e d0       	rcall	.+124    	; 0xb9a <__ultoa_invert+0x9c>
 b1e:	b4 e0       	ldi	r27, 0x04	; 4
 b20:	3c d0       	rcall	.+120    	; 0xb9a <__ultoa_invert+0x9c>
 b22:	67 0f       	add	r22, r23
 b24:	78 1f       	adc	r23, r24
 b26:	89 1f       	adc	r24, r25
 b28:	9a 1f       	adc	r25, r26
 b2a:	a1 1d       	adc	r26, r1
 b2c:	68 0f       	add	r22, r24
 b2e:	79 1f       	adc	r23, r25
 b30:	8a 1f       	adc	r24, r26
 b32:	91 1d       	adc	r25, r1
 b34:	a1 1d       	adc	r26, r1
 b36:	6a 0f       	add	r22, r26
 b38:	71 1d       	adc	r23, r1
 b3a:	81 1d       	adc	r24, r1
 b3c:	91 1d       	adc	r25, r1
 b3e:	a1 1d       	adc	r26, r1
 b40:	20 d0       	rcall	.+64     	; 0xb82 <__ultoa_invert+0x84>
 b42:	09 f4       	brne	.+2      	; 0xb46 <__ultoa_invert+0x48>
 b44:	68 94       	set
 b46:	3f 91       	pop	r19
 b48:	2a e0       	ldi	r18, 0x0A	; 10
 b4a:	26 9f       	mul	r18, r22
 b4c:	11 24       	eor	r1, r1
 b4e:	30 19       	sub	r19, r0
 b50:	30 5d       	subi	r19, 0xD0	; 208
 b52:	31 93       	st	Z+, r19
 b54:	de f6       	brtc	.-74     	; 0xb0c <__ultoa_invert+0xe>
 b56:	cf 01       	movw	r24, r30
 b58:	08 95       	ret
 b5a:	46 2f       	mov	r20, r22
 b5c:	47 70       	andi	r20, 0x07	; 7
 b5e:	40 5d       	subi	r20, 0xD0	; 208
 b60:	41 93       	st	Z+, r20
 b62:	b3 e0       	ldi	r27, 0x03	; 3
 b64:	0f d0       	rcall	.+30     	; 0xb84 <__ultoa_invert+0x86>
 b66:	c9 f7       	brne	.-14     	; 0xb5a <__ultoa_invert+0x5c>
 b68:	f6 cf       	rjmp	.-20     	; 0xb56 <__ultoa_invert+0x58>
 b6a:	46 2f       	mov	r20, r22
 b6c:	4f 70       	andi	r20, 0x0F	; 15
 b6e:	40 5d       	subi	r20, 0xD0	; 208
 b70:	4a 33       	cpi	r20, 0x3A	; 58
 b72:	18 f0       	brcs	.+6      	; 0xb7a <__ultoa_invert+0x7c>
 b74:	49 5d       	subi	r20, 0xD9	; 217
 b76:	31 fd       	sbrc	r19, 1
 b78:	40 52       	subi	r20, 0x20	; 32
 b7a:	41 93       	st	Z+, r20
 b7c:	02 d0       	rcall	.+4      	; 0xb82 <__ultoa_invert+0x84>
 b7e:	a9 f7       	brne	.-22     	; 0xb6a <__ultoa_invert+0x6c>
 b80:	ea cf       	rjmp	.-44     	; 0xb56 <__ultoa_invert+0x58>
 b82:	b4 e0       	ldi	r27, 0x04	; 4
 b84:	a6 95       	lsr	r26
 b86:	97 95       	ror	r25
 b88:	87 95       	ror	r24
 b8a:	77 95       	ror	r23
 b8c:	67 95       	ror	r22
 b8e:	ba 95       	dec	r27
 b90:	c9 f7       	brne	.-14     	; 0xb84 <__ultoa_invert+0x86>
 b92:	00 97       	sbiw	r24, 0x00	; 0
 b94:	61 05       	cpc	r22, r1
 b96:	71 05       	cpc	r23, r1
 b98:	08 95       	ret
 b9a:	9b 01       	movw	r18, r22
 b9c:	ac 01       	movw	r20, r24
 b9e:	0a 2e       	mov	r0, r26
 ba0:	06 94       	lsr	r0
 ba2:	57 95       	ror	r21
 ba4:	47 95       	ror	r20
 ba6:	37 95       	ror	r19
 ba8:	27 95       	ror	r18
 baa:	ba 95       	dec	r27
 bac:	c9 f7       	brne	.-14     	; 0xba0 <__ultoa_invert+0xa2>
 bae:	62 0f       	add	r22, r18
 bb0:	73 1f       	adc	r23, r19
 bb2:	84 1f       	adc	r24, r20
 bb4:	95 1f       	adc	r25, r21
 bb6:	a0 1d       	adc	r26, r0
 bb8:	08 95       	ret

00000bba <__prologue_saves__>:
 bba:	2f 92       	push	r2
 bbc:	3f 92       	push	r3
 bbe:	4f 92       	push	r4
 bc0:	5f 92       	push	r5
 bc2:	6f 92       	push	r6
 bc4:	7f 92       	push	r7
 bc6:	8f 92       	push	r8
 bc8:	9f 92       	push	r9
 bca:	af 92       	push	r10
 bcc:	bf 92       	push	r11
 bce:	cf 92       	push	r12
 bd0:	df 92       	push	r13
 bd2:	ef 92       	push	r14
 bd4:	ff 92       	push	r15
 bd6:	0f 93       	push	r16
 bd8:	1f 93       	push	r17
 bda:	cf 93       	push	r28
 bdc:	df 93       	push	r29
 bde:	cd b7       	in	r28, 0x3d	; 61
 be0:	de b7       	in	r29, 0x3e	; 62
 be2:	ca 1b       	sub	r28, r26
 be4:	db 0b       	sbc	r29, r27
 be6:	0f b6       	in	r0, 0x3f	; 63
 be8:	f8 94       	cli
 bea:	de bf       	out	0x3e, r29	; 62
 bec:	0f be       	out	0x3f, r0	; 63
 bee:	cd bf       	out	0x3d, r28	; 61
 bf0:	09 94       	ijmp

00000bf2 <__epilogue_restores__>:
 bf2:	2a 88       	ldd	r2, Y+18	; 0x12
 bf4:	39 88       	ldd	r3, Y+17	; 0x11
 bf6:	48 88       	ldd	r4, Y+16	; 0x10
 bf8:	5f 84       	ldd	r5, Y+15	; 0x0f
 bfa:	6e 84       	ldd	r6, Y+14	; 0x0e
 bfc:	7d 84       	ldd	r7, Y+13	; 0x0d
 bfe:	8c 84       	ldd	r8, Y+12	; 0x0c
 c00:	9b 84       	ldd	r9, Y+11	; 0x0b
 c02:	aa 84       	ldd	r10, Y+10	; 0x0a
 c04:	b9 84       	ldd	r11, Y+9	; 0x09
 c06:	c8 84       	ldd	r12, Y+8	; 0x08
 c08:	df 80       	ldd	r13, Y+7	; 0x07
 c0a:	ee 80       	ldd	r14, Y+6	; 0x06
 c0c:	fd 80       	ldd	r15, Y+5	; 0x05
 c0e:	0c 81       	ldd	r16, Y+4	; 0x04
 c10:	1b 81       	ldd	r17, Y+3	; 0x03
 c12:	aa 81       	ldd	r26, Y+2	; 0x02
 c14:	b9 81       	ldd	r27, Y+1	; 0x01
 c16:	ce 0f       	add	r28, r30
 c18:	d1 1d       	adc	r29, r1
 c1a:	0f b6       	in	r0, 0x3f	; 63
 c1c:	f8 94       	cli
 c1e:	de bf       	out	0x3e, r29	; 62
 c20:	0f be       	out	0x3f, r0	; 63
 c22:	cd bf       	out	0x3d, r28	; 61
 c24:	ed 01       	movw	r28, r26
 c26:	08 95       	ret

00000c28 <_exit>:
 c28:	f8 94       	cli

00000c2a <__stop_program>:
 c2a:	ff cf       	rjmp	.-2      	; 0xc2a <__stop_program>


LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000002f0  00000384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800120  00800120  000003a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f83  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008eb  00000000  00000000  00001447  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000068f  00000000  00000000  00001d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  000023c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044c  00000000  00000000  000024fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000669  00000000  00000000  00002948  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002fb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 32       	cpi	r26, 0x21	; 33
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1f 01 	call	0x23e	; 0x23e <main>
  9e:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <sendHalfByte>:
			TWI_Transmit_Addr(PortLCD |= 0x08, 0x4E);	// BackLight ON
			break;
	}
}

void sendHalfByte(unsigned char c) { // 4 bit
  a6:	cf 93       	push	r28
	// current Higher 4 Bit = data lower 4bit
	c <<= 4;
  a8:	c8 2f       	mov	r28, r24
  aa:	c2 95       	swap	r28
  ac:	c0 7f       	andi	r28, 0xF0	; 240
	
	TWI_Transmit_Addr(PortLCD |= 0x04, 0x4E); // Enable E(0x04)
  ae:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
  b8:	6e e4       	ldi	r22, 0x4E	; 78
  ba:	0e 94 65 01 	call	0x2ca	; 0x2ca <TWI_Transmit_Addr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	87 ec       	ldi	r24, 0xC7	; 199
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <sendHalfByte+0x1c>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <sendHalfByte+0x22>
  c8:	00 00       	nop
	_delay_us(50);

	TWI_Transmit_Addr(PortLCD | c, 0x4E);
  ca:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
  ce:	6e e4       	ldi	r22, 0x4E	; 78
  d0:	8c 2b       	or	r24, r28
  d2:	0e 94 65 01 	call	0x2ca	; 0x2ca <TWI_Transmit_Addr>

	TWI_Transmit_Addr(PortLCD &= ~0x04, 0x4E); // Disable E(0x04)
  d6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
  da:	8b 7f       	andi	r24, 0xFB	; 251
  dc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
  e0:	6e e4       	ldi	r22, 0x4E	; 78
  e2:	0e 94 65 01 	call	0x2ca	; 0x2ca <TWI_Transmit_Addr>
  e6:	87 ec       	ldi	r24, 0xC7	; 199
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <sendHalfByte+0x44>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <sendHalfByte+0x4a>
  f0:	00 00       	nop
	_delay_us(50);
}
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <sendByte>:

void sendByte(unsigned char c, unsigned char mode) {
  f6:	cf 93       	push	r28
  f8:	c8 2f       	mov	r28, r24
	if(mode == 0) TWI_Transmit_Addr(PortLCD &= ~0x01, 0x4E);
  fa:	61 11       	cpse	r22, r1
  fc:	09 c0       	rjmp	.+18     	; 0x110 <sendByte+0x1a>
  fe:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 102:	8e 7f       	andi	r24, 0xFE	; 254
 104:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 108:	6e e4       	ldi	r22, 0x4E	; 78
 10a:	0e 94 65 01 	call	0x2ca	; 0x2ca <TWI_Transmit_Addr>
 10e:	08 c0       	rjmp	.+16     	; 0x120 <sendByte+0x2a>
	else TWI_Transmit_Addr(PortLCD |= 0x01, 0x4E);
 110:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 114:	81 60       	ori	r24, 0x01	; 1
 116:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 11a:	6e e4       	ldi	r22, 0x4E	; 78
 11c:	0e 94 65 01 	call	0x2ca	; 0x2ca <TWI_Transmit_Addr>
	unsigned char hc = 0;
	hc = c >> 4;
	sendHalfByte(hc);
 120:	8c 2f       	mov	r24, r28
 122:	82 95       	swap	r24
 124:	8f 70       	andi	r24, 0x0F	; 15
 126:	0e 94 53 00 	call	0xa6	; 0xa6 <sendHalfByte>
	sendHalfByte(c);
 12a:	8c 2f       	mov	r24, r28
 12c:	0e 94 53 00 	call	0xa6	; 0xa6 <sendHalfByte>
}
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <LCD_Init>:
#include "twi.h"

volatile unsigned char PortLCD = 0;

void LCD_Init(void) {
	sendByte(0b00110011, 0);
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	83 e3       	ldi	r24, 0x33	; 51
 138:	0e 94 7b 00 	call	0xf6	; 0xf6 <sendByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	8f e1       	ldi	r24, 0x1F	; 31
 13e:	9e e4       	ldi	r25, 0x4E	; 78
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <LCD_Init+0xc>
 144:	00 c0       	rjmp	.+0      	; 0x146 <LCD_Init+0x12>
 146:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	8f e8       	ldi	r24, 0x8F	; 143
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCD_Init+0x18>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCD_Init+0x1e>
 152:	00 00       	nop
	//sendHalfByte(0b00000011);
	_delay_ms(5);
	//sendHalfByte(0b00000011);
	_delay_us(100);
	sendHalfByte(0b00000011);
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	0e 94 53 00 	call	0xa6	; 0xa6 <sendHalfByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	8f e9       	ldi	r24, 0x9F	; 159
 15c:	9f e0       	ldi	r25, 0x0F	; 15
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <LCD_Init+0x2a>
 162:	00 c0       	rjmp	.+0      	; 0x164 <LCD_Init+0x30>
 164:	00 00       	nop
	_delay_ms(1);
	sendHalfByte(0b00000010);
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 53 00 	call	0xa6	; 0xa6 <sendHalfByte>
 16c:	8f e9       	ldi	r24, 0x9F	; 159
 16e:	9f e0       	ldi	r25, 0x0F	; 15
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <LCD_Init+0x3c>
 174:	00 c0       	rjmp	.+0      	; 0x176 <LCD_Init+0x42>
 176:	00 00       	nop
	_delay_ms(1);
	sendByte(0b00101000, 0); // Data 4bit, Line 2, Font 5x8
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	88 e2       	ldi	r24, 0x28	; 40
 17c:	0e 94 7b 00 	call	0xf6	; 0xf6 <sendByte>
 180:	8f e9       	ldi	r24, 0x9F	; 159
 182:	9f e0       	ldi	r25, 0x0F	; 15
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <LCD_Init+0x50>
 188:	00 c0       	rjmp	.+0      	; 0x18a <LCD_Init+0x56>
 18a:	00 00       	nop
	_delay_ms(1);
	sendByte(0b00001110, 0); //Display ON, Cursor ON, Blink OFF
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	8e e0       	ldi	r24, 0x0E	; 14
 190:	0e 94 7b 00 	call	0xf6	; 0xf6 <sendByte>
 194:	8f e9       	ldi	r24, 0x9F	; 159
 196:	9f e0       	ldi	r25, 0x0F	; 15
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_Init+0x64>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_Init+0x6a>
 19e:	00 00       	nop
	_delay_ms(1);

	TWI_Transmit_Addr(PortLCD |= 0x08, 0x4E);	// BackLight ON
 1a0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 1a4:	88 60       	ori	r24, 0x08	; 8
 1a6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 1aa:	6e e4       	ldi	r22, 0x4E	; 78
 1ac:	0e 94 65 01 	call	0x2ca	; 0x2ca <TWI_Transmit_Addr>
	
	TWI_Transmit_Addr(PortLCD &= ~0x02, 0x4E);	// LCD Write ON
 1b0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 1b4:	8d 7f       	andi	r24, 0xFD	; 253
 1b6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 1ba:	6e e4       	ldi	r22, 0x4E	; 78
 1bc:	0e 94 65 01 	call	0x2ca	; 0x2ca <TWI_Transmit_Addr>
 1c0:	08 95       	ret

000001c2 <LCD_sendString>:
	hc = c >> 4;
	sendHalfByte(hc);
	sendHalfByte(c);
}

void LCD_sendString(char s[]) {
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
 1c8:	8c 01       	movw	r16, r24
	char n;
	for(n=0; s[n]!='\0'; n++)
 1ca:	c0 e0       	ldi	r28, 0x00	; 0
 1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <LCD_sendString+0x14>
		sendByte(s[n], 1);
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	0e 94 7b 00 	call	0xf6	; 0xf6 <sendByte>
	sendHalfByte(c);
}

void LCD_sendString(char s[]) {
	char n;
	for(n=0; s[n]!='\0'; n++)
 1d4:	cf 5f       	subi	r28, 0xFF	; 255
 1d6:	f8 01       	movw	r30, r16
 1d8:	ec 0f       	add	r30, r28
 1da:	f1 1d       	adc	r31, r1
 1dc:	80 81       	ld	r24, Z
 1de:	81 11       	cpse	r24, r1
 1e0:	f6 cf       	rjmp	.-20     	; 0x1ce <LCD_sendString+0xc>
		sendByte(s[n], 1);
}
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	08 95       	ret

000001ea <LCD_setPosition>:

void LCD_setPosition(unsigned char x, unsigned char y) {
	switch(y) {
 1ea:	61 30       	cpi	r22, 0x01	; 1
 1ec:	59 f0       	breq	.+22     	; 0x204 <LCD_setPosition+0x1a>
 1ee:	28 f0       	brcs	.+10     	; 0x1fa <LCD_setPosition+0x10>
 1f0:	62 30       	cpi	r22, 0x02	; 2
 1f2:	71 f0       	breq	.+28     	; 0x210 <LCD_setPosition+0x26>
 1f4:	63 30       	cpi	r22, 0x03	; 3
 1f6:	91 f0       	breq	.+36     	; 0x21c <LCD_setPosition+0x32>
 1f8:	08 95       	ret
		case 0: 
			sendByte(x | 0x80, 0);
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	80 68       	ori	r24, 0x80	; 128
 1fe:	0e 94 7b 00 	call	0xf6	; 0xf6 <sendByte>
			break;
 202:	08 95       	ret
		case 1: 
			sendByte((0x40+ x) | 0x80, 0);
 204:	80 5c       	subi	r24, 0xC0	; 192
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	80 68       	ori	r24, 0x80	; 128
 20a:	0e 94 7b 00 	call	0xf6	; 0xf6 <sendByte>
			break;
 20e:	08 95       	ret
		case 2: 
			sendByte((0x10+ x) | 0x80, 0);
 210:	80 5f       	subi	r24, 0xF0	; 240
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	80 68       	ori	r24, 0x80	; 128
 216:	0e 94 7b 00 	call	0xf6	; 0xf6 <sendByte>
			break;
 21a:	08 95       	ret
		case 3: 
			sendByte((0x50+ x) | 0x80, 0);
 21c:	80 5b       	subi	r24, 0xB0	; 176
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	80 68       	ori	r24, 0x80	; 128
 222:	0e 94 7b 00 	call	0xf6	; 0xf6 <sendByte>
 226:	08 95       	ret

00000228 <LCD_clear>:
			break;
	}
}

void LCD_clear(void) {
	sendByte(0x01, 0);
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 7b 00 	call	0xf6	; 0xf6 <sendByte>
 230:	8f e1       	ldi	r24, 0x1F	; 31
 232:	9e e4       	ldi	r25, 0x4E	; 78
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <LCD_clear+0xc>
 238:	00 c0       	rjmp	.+0      	; 0x23a <LCD_clear+0x12>
 23a:	00 00       	nop
 23c:	08 95       	ret

0000023e <main>:
#include "main.h"
#include "twi.h"
#include "lcd.h" 

int main(void) {
	DDRC |= 0b00110000;
 23e:	87 b1       	in	r24, 0x07	; 7
 240:	80 63       	ori	r24, 0x30	; 48
 242:	87 b9       	out	0x07, r24	; 7
	
	TWI_Init();
 244:	0e 94 4b 01 	call	0x296	; 0x296 <TWI_Init>
 248:	2f ef       	ldi	r18, 0xFF	; 255
 24a:	80 e7       	ldi	r24, 0x70	; 112
 24c:	92 e0       	ldi	r25, 0x02	; 2
 24e:	21 50       	subi	r18, 0x01	; 1
 250:	80 40       	sbci	r24, 0x00	; 0
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <main+0x10>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0x1a>
 258:	00 00       	nop
	_delay_ms(50);
	LCD_Init();
 25a:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Init>
	
	while (1) {
		LCD_clear();
 25e:	0e 94 14 01 	call	0x228	; 0x228 <LCD_clear>
		LCD_setPosition(0,0);
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_setPosition>
		LCD_sendString("TestLCD 23.12.29");
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_sendString>
		LCD_setPosition(1,1);
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_setPosition>
		LCD_sendString(" code review ");
 27a:	81 e1       	ldi	r24, 0x11	; 17
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_sendString>
 282:	2f ef       	ldi	r18, 0xFF	; 255
 284:	83 e2       	ldi	r24, 0x23	; 35
 286:	94 ef       	ldi	r25, 0xF4	; 244
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	80 40       	sbci	r24, 0x00	; 0
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <main+0x4a>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0x54>
 292:	00 00       	nop
 294:	e4 cf       	rjmp	.-56     	; 0x25e <main+0x20>

00000296 <TWI_Init>:
#include "main.h"

void TWI_Init(void){
	// TWI Bit Rate Register
	// TWBR = 0x48;		// 0b01001000
	TWBR = (1<<TWBR5) | (1<<TWBR3);		// SCL Frequency, Datasheet for reference
 296:	88 e2       	ldi	r24, 0x28	; 40
 298:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 29c:	08 95       	ret

0000029e <TWI_Start>:
}

void TWI_Start(void) {
	// TWI Control Register
	// Interrupt, Start bit, Enable Set
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 29e:	84 ea       	ldi	r24, 0xA4	; 164
 2a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));		// TWI Setup complete -> Interrupt flag set
 2a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2a8:	88 23       	and	r24, r24
 2aa:	e4 f7       	brge	.-8      	; 0x2a4 <TWI_Start+0x6>
}
 2ac:	08 95       	ret

000002ae <TWI_Transmit>:

void TWI_Transmit(unsigned char data) {
	// TWI Data Register(Data buffer, 8bit)
	TWDR = data;
 2ae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);		// Transmit -> Interrupt
 2b2:	84 e8       	ldi	r24, 0x84	; 132
 2b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
 2b8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2bc:	88 23       	and	r24, r24
 2be:	e4 f7       	brge	.-8      	; 0x2b8 <TWI_Transmit+0xa>
}
 2c0:	08 95       	ret

000002c2 <TWI_Stop>:
	TWI_Stop();
}

void TWI_Stop(void) {
	// TWCR Register init
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
 2c2:	84 e9       	ldi	r24, 0x94	; 148
 2c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2c8:	08 95       	ret

000002ca <TWI_Transmit_Addr>:
	TWDR = data;
	TWCR = (1<<TWINT) | (1<<TWEN);		// Transmit -> Interrupt
	while(!(TWCR & (1<<TWINT)));
}

void TWI_Transmit_Addr(unsigned char data, unsigned char addr){
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	c8 2f       	mov	r28, r24
 2d0:	d6 2f       	mov	r29, r22
	TWI_Start();
 2d2:	0e 94 4f 01 	call	0x29e	; 0x29e <TWI_Start>
	TWI_Transmit(addr);
 2d6:	8d 2f       	mov	r24, r29
 2d8:	0e 94 57 01 	call	0x2ae	; 0x2ae <TWI_Transmit>
	TWI_Transmit(data);
 2dc:	8c 2f       	mov	r24, r28
 2de:	0e 94 57 01 	call	0x2ae	; 0x2ae <TWI_Transmit>
	TWI_Stop();
 2e2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <TWI_Stop>
}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <_exit>:
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>

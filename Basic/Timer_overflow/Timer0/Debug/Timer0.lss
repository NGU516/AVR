
Timer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000704  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063c  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ab  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000011bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000368  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000020  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 57 00 	call	0xae	; 0xae <main>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:

void Timer_10ms_delay(){	
	while(!(TIFR0 & 0x01));	// Flag가 생겼을 때(9.984ms가 지났을 때)
	TIFR0 |= 0x01;  // TIFR(Timer Interrupt Flag Register), TOV0(Timer overflow) flag 초기화
					// 실제로 레지스터에 1이 기록되는 것이 아닌 초기화하는 동작을 실행(제조사가 정함)
	TCNT0 = 0x64;	// Timer count 100으로 다시 초기화
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
  84:	85 b9       	out	0x05, r24	; 5
  86:	08 95       	ret

00000088 <Timer_init>:
  88:	14 bc       	out	0x24, r1	; 36
  8a:	85 e0       	ldi	r24, 0x05	; 5
  8c:	85 bd       	out	0x25, r24	; 37
  8e:	84 e6       	ldi	r24, 0x64	; 100
  90:	86 bd       	out	0x26, r24	; 38
  92:	08 95       	ret

00000094 <Timer_1s_delay>:
}

void Timer_1s_delay(){
	unsigned char count = 100;
  94:	94 e6       	ldi	r25, 0x64	; 100
	
	while(count){
  96:	08 c0       	rjmp	.+16     	; 0xa8 <Timer_1s_delay+0x14>
		while(!(TIFR0 & 0x01));
  98:	a8 9b       	sbis	0x15, 0	; 21
  9a:	fe cf       	rjmp	.-4      	; 0x98 <Timer_1s_delay+0x4>
		TIFR0 |= 0x01; 
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	85 bb       	out	0x15, r24	; 21
		TCNT0 = 0x64;
  a2:	84 e6       	ldi	r24, 0x64	; 100
  a4:	86 bd       	out	0x26, r24	; 38
		count--;
  a6:	91 50       	subi	r25, 0x01	; 1
}

void Timer_1s_delay(){
	unsigned char count = 100;
	
	while(count){
  a8:	91 11       	cpse	r25, r1
  aa:	f6 cf       	rjmp	.-20     	; 0x98 <Timer_1s_delay+0x4>
		while(!(TIFR0 & 0x01));
		TIFR0 |= 0x01; 
		TCNT0 = 0x64;
		count--;
	}
}
  ac:	08 95       	ret

000000ae <main>:

void main(){
	setup();
  ae:	0e 94 40 00 	call	0x80	; 0x80 <setup>
	Timer_init();
  b2:	0e 94 44 00 	call	0x88	; 0x88 <Timer_init>
	
	while(1){
		PORTB = 0xFF;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	85 b9       	out	0x05, r24	; 5
		Timer_1s_delay();
  ba:	0e 94 4a 00 	call	0x94	; 0x94 <Timer_1s_delay>
		
		PORTB = 0x00;
  be:	15 b8       	out	0x05, r1	; 5
		Timer_1s_delay();
  c0:	0e 94 4a 00 	call	0x94	; 0x94 <Timer_1s_delay>
  c4:	f8 cf       	rjmp	.-16     	; 0xb6 <main+0x8>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>

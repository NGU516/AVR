
LED_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000140  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800102  00800102  000001d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000070a  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000063e  00000000  00000000  00000982  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000024e  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001210  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000369  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000015bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 99 00 	call	0x132	; 0x132 <main>
  9e:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
unsigned long count = 0;
unsigned char pattern_table[2] = {LED | RED | BLUE, GRENN | BLUE};
unsigned char index = 0;	// 배열 요소 접근 변수
	
void setup(){
	DDRB = LED | RED | GRENN | BLUE | BTN;	// 출력 설정
  a6:	8f e2       	ldi	r24, 0x2F	; 47
  a8:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
  aa:	15 b8       	out	0x05, r1	; 5
  ac:	08 95       	ret

000000ae <loop>:
}
void loop(){
	PORTB &= ~(BTN);	// BTN만 0으로 바꾸기
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	8e 7f       	andi	r24, 0xFE	; 254
  b2:	85 b9       	out	0x05, r24	; 5
	
	// for(count = 0; count < 10000; count++);	// AVR 시간 측정(발진기의 펄스이용), 0x2710 == 10,000(10진수), 10ms
	if((input_value & BTN) == BTN){
  b4:	18 9b       	sbis	0x03, 0	; 3
  b6:	3c c0       	rjmp	.+120    	; 0x130 <loop+0x82>
		for(count=0; count < 500000; count++){		// 약 1초
  b8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <count>
  bc:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <count+0x1>
  c0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <count+0x2>
  c4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <count+0x3>
  c8:	26 c0       	rjmp	.+76     	; 0x116 <loop+0x68>
			if((input_value & BTN) == BTN){		// BTN 누를 시
  ca:	18 9b       	sbis	0x03, 0	; 3
  cc:	11 c0       	rjmp	.+34     	; 0xf0 <loop+0x42>
				PORTB = 0x00;
  ce:	15 b8       	out	0x05, r1	; 5
				while((input_value & BTN));	// BTN 지속, 떼기 전까지
  d0:	18 99       	sbic	0x03, 0	; 3
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <loop+0x22>
				PORTB = (pattern_table[(index++) & 0x01]);	// (index++)&0x배열의 개수(16진수), 순차적으로 인덱스의 요소만 and 연산으로 나옴
  d4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	98 0f       	add	r25, r24
  dc:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__data_end>
  e0:	28 2f       	mov	r18, r24
  e2:	21 70       	andi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	f9 01       	movw	r30, r18
  e8:	e0 50       	subi	r30, 0x00	; 0
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	80 81       	ld	r24, Z
  ee:	85 b9       	out	0x05, r24	; 5
void loop(){
	PORTB &= ~(BTN);	// BTN만 0으로 바꾸기
	
	// for(count = 0; count < 10000; count++);	// AVR 시간 측정(발진기의 펄스이용), 0x2710 == 10,000(10진수), 10ms
	if((input_value & BTN) == BTN){
		for(count=0; count < 500000; count++){		// 약 1초
  f0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count>
  f4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <count+0x1>
  f8:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <count+0x2>
  fc:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <count+0x3>
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	a1 1d       	adc	r26, r1
 104:	b1 1d       	adc	r27, r1
 106:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <count>
 10a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <count+0x1>
 10e:	a0 93 05 01 	sts	0x0105, r26	; 0x800105 <count+0x2>
 112:	b0 93 06 01 	sts	0x0106, r27	; 0x800106 <count+0x3>
 116:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count>
 11a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <count+0x1>
 11e:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <count+0x2>
 122:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <count+0x3>
 126:	80 32       	cpi	r24, 0x20	; 32
 128:	91 4a       	sbci	r25, 0xA1	; 161
 12a:	a7 40       	sbci	r26, 0x07	; 7
 12c:	b1 05       	cpc	r27, r1
 12e:	68 f2       	brcs	.-102    	; 0xca <loop+0x1c>
 130:	08 95       	ret

00000132 <main>:
	
}

int main(void)
{
	setup();
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	
    while (1) 
    {
		loop();
 136:	0e 94 57 00 	call	0xae	; 0xae <loop>
 13a:	fd cf       	rjmp	.-6      	; 0x136 <main+0x4>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>

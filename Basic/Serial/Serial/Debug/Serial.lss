
Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000118  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077a  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a7  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030d  00000000  00000000  0000104d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  0000135c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000391  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000020  00000000  00000000  00001771  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001791  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  78:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:
	OCR1A = 0x3e8;        // 0x09C4 = 2500 1ms, 16MHz / 64 / 2500 = 10Hz, 10ms 주기
}

void Timer1_10ms_delay() {
	while (!(TIFR1 & (1 << OCF1A)));
	TIFR1 |= (1 << OCF1A);  // Output Compare Flag 초기화
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
  84:	85 b9       	out	0x05, r24	; 5
  86:	92 e0       	ldi	r25, 0x02	; 2
  88:	9a b9       	out	0x0a, r25	; 10
  8a:	8b b9       	out	0x0b, r24	; 11
  8c:	08 95       	ret

0000008e <USART0_init>:
  8e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  92:	87 e6       	ldi	r24, 0x67	; 103
  94:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  98:	80 e2       	ldi	r24, 0x20	; 32
  9a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  9e:	88 e1       	ldi	r24, 0x18	; 24
  a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  aa:	08 95       	ret

000000ac <USART0_send>:
  ac:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b0:	95 ff       	sbrs	r25, 5
  b2:	fc cf       	rjmp	.-8      	; 0xac <USART0_send>
  b4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b8:	95 ff       	sbrs	r25, 5
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <USART0_send+0x8>
  bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c0:	08 95       	ret

000000c2 <Timer1_init>:
  c2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  c6:	8b e0       	ldi	r24, 0x0B	; 11
  c8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  cc:	88 ee       	ldi	r24, 0xE8	; 232
  ce:	93 e0       	ldi	r25, 0x03	; 3
  d0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  d4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  d8:	08 95       	ret

000000da <Timer1_1s_delay>:
}

void Timer1_1s_delay(){
	unsigned char count = 0;
	
	count = 100;
  da:	94 e6       	ldi	r25, 0x64	; 100
	while(count){
  dc:	06 c0       	rjmp	.+12     	; 0xea <Timer1_1s_delay+0x10>
		while (!(TIFR1 & (1 << OCF1A)));
  de:	b1 9b       	sbis	0x16, 1	; 22
  e0:	fe cf       	rjmp	.-4      	; 0xde <Timer1_1s_delay+0x4>
		TIFR1 |= (1 << OCF1A);  // Output Compare Flag 초기화
  e2:	86 b3       	in	r24, 0x16	; 22
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	86 bb       	out	0x16, r24	; 22
		count--;
  e8:	91 50       	subi	r25, 0x01	; 1

void Timer1_1s_delay(){
	unsigned char count = 0;
	
	count = 100;
	while(count){
  ea:	91 11       	cpse	r25, r1
  ec:	f8 cf       	rjmp	.-16     	; 0xde <Timer1_1s_delay+0x4>
		while (!(TIFR1 & (1 << OCF1A)));
		TIFR1 |= (1 << OCF1A);  // Output Compare Flag 초기화
		count--;
	}
}
  ee:	08 95       	ret

000000f0 <main>:
//////////////////////////////////////////////////////////////////////////
int main(){
	//sei();
	unsigned char Data;		// 전송할 문자를 저장하는 버퍼
	
	setup();
  f0:	0e 94 40 00 	call	0x80	; 0x80 <setup>
	USART0_init();
  f4:	0e 94 47 00 	call	0x8e	; 0x8e <USART0_init>
	Timer1_init();
  f8:	0e 94 61 00 	call	0xc2	; 0xc2 <Timer1_init>
	Timer1_1s_delay();
  fc:	0e 94 6d 00 	call	0xda	; 0xda <Timer1_1s_delay>
	
	while(1){
		Data = 'A';
		PORTB |= 0x00100000; // LED On
 100:	85 b1       	in	r24, 0x05	; 5
 102:	85 b9       	out	0x05, r24	; 5
		USART0_send(Data);
 104:	81 e4       	ldi	r24, 0x41	; 65
 106:	0e 94 56 00 	call	0xac	; 0xac <USART0_send>
		PORTB &= ~0x00100000; // LED Off
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	85 b9       	out	0x05, r24	; 5
		Timer1_1s_delay();
 10e:	0e 94 6d 00 	call	0xda	; 0xda <Timer1_1s_delay>
 112:	f6 cf       	rjmp	.-20     	; 0x100 <main+0x10>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>

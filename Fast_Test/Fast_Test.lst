   1               		.file	"Fast_Test.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/cdm/Desktop/",100,0,2,.Ltext0
   8               		.stabs	"/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c",100,0,2,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  13               		.stabs	"char:t(0,2)=r(0,2);0;127;",128,0,0,0
  14               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  15               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  16               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  17               		.stabs	"__int128:t(0,6)=@s128;r(0,6);02000000000000000000000000000000000000000000;0177777777777777
  18               		.stabs	"__int128 unsigned:t(0,7)=@s128;r(0,7);0;03777777777777777777777777777777777777777777;",128
  19               		.stabs	"long long int:t(0,8)=@s64;r(0,8);01000000000000000000000;00777777777777777777777;",128,0,0
  20               		.stabs	"long long unsigned int:t(0,9)=@s64;r(0,9);0;01777777777777777777777;",128,0,0,0
  21               		.stabs	"short int:t(0,10)=r(0,10);-32768;32767;",128,0,0,0
  22               		.stabs	"short unsigned int:t(0,11)=r(0,11);0;0177777;",128,0,0,0
  23               		.stabs	"signed char:t(0,12)=@s8;r(0,12);-128;127;",128,0,0,0
  24               		.stabs	"unsigned char:t(0,13)=@s8;r(0,13);0;255;",128,0,0,0
  25               		.stabs	"float:t(0,14)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"double:t(0,15)=r(0,1);4;0;",128,0,0,0
  27               		.stabs	"long double:t(0,16)=r(0,1);4;0;",128,0,0,0
  28               		.stabs	"short _Fract:t(0,17)=r(0,1);1;0;",128,0,0,0
  29               		.stabs	"_Fract:t(0,18)=r(0,1);2;0;",128,0,0,0
  30               		.stabs	"long _Fract:t(0,19)=r(0,1);4;0;",128,0,0,0
  31               		.stabs	"long long _Fract:t(0,20)=r(0,1);8;0;",128,0,0,0
  32               		.stabs	"unsigned short _Fract:t(0,21)=r(0,1);1;0;",128,0,0,0
  33               		.stabs	"unsigned _Fract:t(0,22)=r(0,1);2;0;",128,0,0,0
  34               		.stabs	"unsigned long _Fract:t(0,23)=r(0,1);4;0;",128,0,0,0
  35               		.stabs	"unsigned long long _Fract:t(0,24)=r(0,1);8;0;",128,0,0,0
  36               		.stabs	"_Sat short _Fract:t(0,25)=r(0,1);1;0;",128,0,0,0
  37               		.stabs	"_Sat _Fract:t(0,26)=r(0,1);2;0;",128,0,0,0
  38               		.stabs	"_Sat long _Fract:t(0,27)=r(0,1);4;0;",128,0,0,0
  39               		.stabs	"_Sat long long _Fract:t(0,28)=r(0,1);8;0;",128,0,0,0
  40               		.stabs	"_Sat unsigned short _Fract:t(0,29)=r(0,1);1;0;",128,0,0,0
  41               		.stabs	"_Sat unsigned _Fract:t(0,30)=r(0,1);2;0;",128,0,0,0
  42               		.stabs	"_Sat unsigned long _Fract:t(0,31)=r(0,1);4;0;",128,0,0,0
  43               		.stabs	"_Sat unsigned long long _Fract:t(0,32)=r(0,1);8;0;",128,0,0,0
  44               		.stabs	"short _Accum:t(0,33)=r(0,1);2;0;",128,0,0,0
  45               		.stabs	"_Accum:t(0,34)=r(0,1);4;0;",128,0,0,0
  46               		.stabs	"long _Accum:t(0,35)=r(0,1);8;0;",128,0,0,0
  47               		.stabs	"long long _Accum:t(0,36)=r(0,1);8;0;",128,0,0,0
  48               		.stabs	"unsigned short _Accum:t(0,37)=r(0,1);2;0;",128,0,0,0
  49               		.stabs	"unsigned _Accum:t(0,38)=r(0,1);4;0;",128,0,0,0
  50               		.stabs	"unsigned long _Accum:t(0,39)=r(0,1);8;0;",128,0,0,0
  51               		.stabs	"unsigned long long _Accum:t(0,40)=r(0,1);8;0;",128,0,0,0
  52               		.stabs	"_Sat short _Accum:t(0,41)=r(0,1);2;0;",128,0,0,0
  53               		.stabs	"_Sat _Accum:t(0,42)=r(0,1);4;0;",128,0,0,0
  54               		.stabs	"_Sat long _Accum:t(0,43)=r(0,1);8;0;",128,0,0,0
  55               		.stabs	"_Sat long long _Accum:t(0,44)=r(0,1);8;0;",128,0,0,0
  56               		.stabs	"_Sat unsigned short _Accum:t(0,45)=r(0,1);2;0;",128,0,0,0
  57               		.stabs	"_Sat unsigned _Accum:t(0,46)=r(0,1);4;0;",128,0,0,0
  58               		.stabs	"_Sat unsigned long _Accum:t(0,47)=r(0,1);8;0;",128,0,0,0
  59               		.stabs	"_Sat unsigned long long _Accum:t(0,48)=r(0,1);8;0;",128,0,0,0
  60               		.stabs	"void:t(0,49)=(0,49)",128,0,0,0
  61               		.stabs	"/usr/lib/avr/include/avr/io.h",130,0,0,0
  62               		.stabs	"/usr/lib/avr/include/avr/sfr_defs.h",130,0,0,0
  63               		.stabs	"/usr/lib/avr/include/inttypes.h",130,0,0,0
  64               		.stabs	"/usr/lib/gcc/avr/5.4.0/include/stdint.h",130,0,0,0
  65               		.stabs	"/usr/lib/avr/include/stdint.h",130,0,0,0
  66               		.stabs	"int8_t:t(5,1)=(0,12)",128,0,125,0
  67               		.stabs	"uint8_t:t(5,2)=(0,13)",128,0,126,0
  68               		.stabs	"int16_t:t(5,3)=(0,1)",128,0,127,0
  69               		.stabs	"uint16_t:t(5,4)=(0,4)",128,0,128,0
  70               		.stabs	"int32_t:t(5,5)=(0,3)",128,0,129,0
  71               		.stabs	"uint32_t:t(5,6)=(0,5)",128,0,130,0
  72               		.stabs	"int64_t:t(5,7)=(0,8)",128,0,132,0
  73               		.stabs	"uint64_t:t(5,8)=(0,9)",128,0,133,0
  74               		.stabs	"intptr_t:t(5,9)=(5,3)",128,0,146,0
  75               		.stabs	"uintptr_t:t(5,10)=(5,4)",128,0,151,0
  76               		.stabs	"int_least8_t:t(5,11)=(5,1)",128,0,163,0
  77               		.stabs	"uint_least8_t:t(5,12)=(5,2)",128,0,168,0
  78               		.stabs	"int_least16_t:t(5,13)=(5,3)",128,0,173,0
  79               		.stabs	"uint_least16_t:t(5,14)=(5,4)",128,0,178,0
  80               		.stabs	"int_least32_t:t(5,15)=(5,5)",128,0,183,0
  81               		.stabs	"uint_least32_t:t(5,16)=(5,6)",128,0,188,0
  82               		.stabs	"int_least64_t:t(5,17)=(5,7)",128,0,196,0
  83               		.stabs	"uint_least64_t:t(5,18)=(5,8)",128,0,203,0
  84               		.stabs	"int_fast8_t:t(5,19)=(5,1)",128,0,217,0
  85               		.stabs	"uint_fast8_t:t(5,20)=(5,2)",128,0,222,0
  86               		.stabs	"int_fast16_t:t(5,21)=(5,3)",128,0,227,0
  87               		.stabs	"uint_fast16_t:t(5,22)=(5,4)",128,0,232,0
  88               		.stabs	"int_fast32_t:t(5,23)=(5,5)",128,0,237,0
  89               		.stabs	"uint_fast32_t:t(5,24)=(5,6)",128,0,242,0
  90               		.stabs	"int_fast64_t:t(5,25)=(5,7)",128,0,250,0
  91               		.stabs	"uint_fast64_t:t(5,26)=(5,8)",128,0,257,0
  92               		.stabs	"intmax_t:t(5,27)=(5,7)",128,0,277,0
  93               		.stabs	"uintmax_t:t(5,28)=(5,8)",128,0,282,0
  94               		.stabn	162,0,0,0
  95               		.stabn	162,0,0,0
  96               		.stabs	"int_farptr_t:t(3,1)=(5,5)",128,0,77,0
  97               		.stabs	"uint_farptr_t:t(3,2)=(5,6)",128,0,81,0
  98               		.stabn	162,0,0,0
  99               		.stabn	162,0,0,0
 100               		.stabs	"/usr/lib/avr/include/avr/fuse.h",130,0,0,0
 101               		.stabs	"__fuse_t:t(6,1)=(6,2)=s3low:(0,13),0,8;high:(0,13),8,8;extended:(0,13),16,8;;",128,0,244,0
 102               		.stabn	162,0,0,0
 103               		.stabn	162,0,0,0
 104               		.stabs	"setup:F(0,49)",36,0,18,setup
 105               	.global	setup
 106               		.type	setup, @function
 107               	setup:
 108               		.stabd	46,0,0
   1:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** #ifndef F_CPU
   2:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** #define F_CPU 16000000UL
   3:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** #endif
   4:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** #include <avr/io.h>
   5:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** #include <util/delay.h>
   6:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** #include <avr/interrupt.h>
   7:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 
   8:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** #define BTN 0x01
   9:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** #define RED 0x02	// D9, PB1
  10:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** #define GREEN 0x04	// D10, PB2
  11:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** #define BLUE 0x08	// D11, PB3
  12:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** #define LED 0x20    // D13, PB5
  13:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** #define input_value PINB
  14:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 
  15:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** volatile unsigned char Data = 0;        // 1BYTE 버퍼
  16:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** volatile unsigned char state = 0;       // 상태
  17:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 
  18:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** void setup() {
 109               		.stabn	68,0,18,.LM0-.LFBB1
 110               	.LM0:
 111               	.LFBB1:
 112               	/* prologue: function */
 113               	/* frame size = 0 */
 114               	/* stack size = 0 */
 115               	.L__stack_usage = 0
  19:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	DDRB = 0xFF;    
 116               		.stabn	68,0,19,.LM1-.LFBB1
 117               	.LM1:
 118 0000 8FEF      		ldi r24,lo8(-1)
 119 0002 84B9      		out 0x4,r24
  20:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	PORTB = 0x00;   
 120               		.stabn	68,0,20,.LM2-.LFBB1
 121               	.LM2:
 122 0004 15B8      		out 0x5,__zero_reg__
  21:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 
  22:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	DDRD = 0x02;    // PD0 = RXD 로 입력 설정, PD1 = TXD 로 출력 설정
 123               		.stabn	68,0,22,.LM3-.LFBB1
 124               	.LM3:
 125 0006 92E0      		ldi r25,lo8(2)
 126 0008 9AB9      		out 0xa,r25
  23:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	PORTD = 0xFF;   // 포트 초기화
 127               		.stabn	68,0,23,.LM4-.LFBB1
 128               	.LM4:
 129 000a 8BB9      		out 0xb,r24
 130 000c 0895      		ret
 131               		.size	setup, .-setup
 132               	.Lscope1:
 133               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 134               		.stabd	78,0,0
 135               		.stabs	"USART0_init:F(0,49)",36,0,26,USART0_init
 136               	.global	USART0_init
 137               		.type	USART0_init, @function
 138               	USART0_init:
 139               		.stabd	46,0,0
  24:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** }
  25:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 
  26:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** void USART0_init(void){
 140               		.stabn	68,0,26,.LM5-.LFBB2
 141               	.LM5:
 142               	.LFBB2:
 143               	/* prologue: function */
 144               	/* frame size = 0 */
 145               	/* stack size = 0 */
 146               	.L__stack_usage = 0
  27:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	UBRR0H = 0x00;	// USART Baud Rate Register High, 9600 baud rate
 147               		.stabn	68,0,27,.LM6-.LFBB2
 148               	.LM6:
 149 000e 1092 C500 		sts 197,__zero_reg__
  28:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	UBRR0L = 103;	// USART Baud Rate Register Low, 9600 baud rate
 150               		.stabn	68,0,28,.LM7-.LFBB2
 151               	.LM7:
 152 0012 87E6      		ldi r24,lo8(103)
 153 0014 8093 C400 		sts 196,r24
  29:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	
  30:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	UCSR0A = 0x20;	// 0b00100000, USART Data Reister Empty, 초기화시 비어있음.
 154               		.stabn	68,0,30,.LM8-.LFBB2
 155               	.LM8:
 156 0018 80E2      		ldi r24,lo8(32)
 157 001a 8093 C000 		sts 192,r24
  31:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	UCSR0B = 0x98;	// 0b00011000, RXEN TXEN '1' 설정 및 UCSZ02 '0' 설정
 158               		.stabn	68,0,31,.LM9-.LFBB2
 159               	.LM9:
 160 001e 88E9      		ldi r24,lo8(-104)
 161 0020 8093 C100 		sts 193,r24
  32:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	UCSR0C = 0x06;	// 0b00000110, UCSZ01, UCSZ00 '1' 설정
 162               		.stabn	68,0,32,.LM10-.LFBB2
 163               	.LM10:
 164 0024 86E0      		ldi r24,lo8(6)
 165 0026 8093 C200 		sts 194,r24
 166 002a 0895      		ret
 167               		.size	USART0_init, .-USART0_init
 168               	.Lscope2:
 169               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 170               		.stabd	78,0,0
 171               		.stabs	"USART0_send:F(0,49)",36,0,36,USART0_send
 172               		.stabs	"Data:P(0,13)",64,0,36,24
 173               	.global	USART0_send
 174               		.type	USART0_send, @function
 175               	USART0_send:
 176               		.stabd	46,0,0
  33:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	///////////// 한 번에 8bit를 보내야 함 {UCSZ02, UCSZ01, UCSZ00} = {0, 1, 1} 설정, 쓰게
  34:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** }
  35:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 
  36:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** void USART0_send(unsigned char Data){
 177               		.stabn	68,0,36,.LM11-.LFBB3
 178               	.LM11:
 179               	.LFBB3:
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 0 */
 183               	.L__stack_usage = 0
 184               	.L4:
  37:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	while(!( UCSR0A & (1<<UDRE0)) );	// while(!(UCSR0A & 0x20));, 데이터가 빌 때까지 대기
 185               		.stabn	68,0,37,.LM12-.LFBB3
 186               	.LM12:
 187 002c 9091 C000 		lds r25,192
 188 0030 95FF      		sbrs r25,5
 189 0032 00C0      		rjmp .L4
  38:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	UDR0 = Data;
 190               		.stabn	68,0,38,.LM13-.LFBB3
 191               	.LM13:
 192 0034 8093 C600 		sts 198,r24
 193 0038 0895      		ret
 194               		.size	USART0_send, .-USART0_send
 195               	.Lscope3:
 196               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 197               		.stabd	78,0,0
 198               		.stabs	"USART0_read:F(0,13)",36,0,41,USART0_read
 199               	.global	USART0_read
 200               		.type	USART0_read, @function
 201               	USART0_read:
 202               		.stabd	46,0,0
  39:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** }
  40:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 
  41:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** unsigned char USART0_read(){
 203               		.stabn	68,0,41,.LM14-.LFBB4
 204               	.LM14:
 205               	.LFBB4:
 206               	/* prologue: function */
 207               	/* frame size = 0 */
 208               	/* stack size = 0 */
 209               	.L__stack_usage = 0
 210               	.L9:
  42:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****     while(!( UCSR0A & (1<<RXC0)) );		// 데이터가 올 때까지
 211               		.stabn	68,0,42,.LM15-.LFBB4
 212               	.LM15:
 213 003a 8091 C000 		lds r24,192
 214 003e 87FF      		sbrs r24,7
 215 0040 00C0      		rjmp .L9
  43:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****     return UDR0;    // 수신된 데이터 리턴
 216               		.stabn	68,0,43,.LM16-.LFBB4
 217               	.LM16:
 218 0042 8091 C600 		lds r24,198
  44:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** }
 219               		.stabn	68,0,44,.LM17-.LFBB4
 220               	.LM17:
 221 0046 0895      		ret
 222               		.size	USART0_read, .-USART0_read
 223               	.Lscope4:
 224               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 225               		.stabd	78,0,0
 226               		.stabs	"Timer1_init:F(0,49)",36,0,46,Timer1_init
 227               	.global	Timer1_init
 228               		.type	Timer1_init, @function
 229               	Timer1_init:
 230               		.stabd	46,0,0
  45:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 
  46:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** void Timer1_init() {
 231               		.stabn	68,0,46,.LM18-.LFBB5
 232               	.LM18:
 233               	.LFBB5:
 234               	/* prologue: function */
 235               	/* frame size = 0 */
 236               	/* stack size = 0 */
 237               	.L__stack_usage = 0
  47:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	TCCR1A = 0x00;        // WGM11, WGM10 -> 0
 238               		.stabn	68,0,47,.LM19-.LFBB5
 239               	.LM19:
 240 0048 1092 8000 		sts 128,__zero_reg__
  48:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10);  // WGM13, WGM12 -> 0100 (CTC 모드), CS12, CS
 241               		.stabn	68,0,48,.LM20-.LFBB5
 242               	.LM20:
 243 004c 8BE0      		ldi r24,lo8(11)
 244 004e 8093 8100 		sts 129,r24
  49:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	OCR1A = 0x09C4;        // 0x09C4 = 2500 1ms, 16MHz / 64 / 2500 = 10Hz, 10ms 주기
 245               		.stabn	68,0,49,.LM21-.LFBB5
 246               	.LM21:
 247 0052 84EC      		ldi r24,lo8(-60)
 248 0054 99E0      		ldi r25,lo8(9)
 249 0056 9093 8900 		sts 136+1,r25
 250 005a 8093 8800 		sts 136,r24
 251 005e 0895      		ret
 252               		.size	Timer1_init, .-Timer1_init
 253               	.Lscope5:
 254               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 255               		.stabd	78,0,0
 256               		.stabs	"Timer1_10ms_delay:F(0,49)",36,0,52,Timer1_10ms_delay
 257               	.global	Timer1_10ms_delay
 258               		.type	Timer1_10ms_delay, @function
 259               	Timer1_10ms_delay:
 260               		.stabd	46,0,0
  50:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** }
  51:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 
  52:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** void Timer1_10ms_delay() {
 261               		.stabn	68,0,52,.LM22-.LFBB6
 262               	.LM22:
 263               	.LFBB6:
 264               	/* prologue: function */
 265               	/* frame size = 0 */
 266               	/* stack size = 0 */
 267               	.L__stack_usage = 0
 268               	.L13:
  53:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	while (!(TIFR1 & (1 << OCF1A)));
 269               		.stabn	68,0,53,.LM23-.LFBB6
 270               	.LM23:
 271 0060 B19B      		sbis 0x16,1
 272 0062 00C0      		rjmp .L13
  54:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	TIFR1 |= (1 << OCF1A);  // Output Compare Flag 초기화
 273               		.stabn	68,0,54,.LM24-.LFBB6
 274               	.LM24:
 275 0064 B19A      		sbi 0x16,1
 276 0066 0895      		ret
 277               		.size	Timer1_10ms_delay, .-Timer1_10ms_delay
 278               	.Lscope6:
 279               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 280               		.stabd	78,0,0
 281               		.stabs	"Timer1_100ms_delay:F(0,49)",36,0,57,Timer1_100ms_delay
 282               	.global	Timer1_100ms_delay
 283               		.type	Timer1_100ms_delay, @function
 284               	Timer1_100ms_delay:
 285               		.stabd	46,0,0
  55:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** }
  56:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 
  57:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** void Timer1_100ms_delay(){
 286               		.stabn	68,0,57,.LM25-.LFBB7
 287               	.LM25:
 288               	.LFBB7:
 289               	/* prologue: function */
 290               	/* frame size = 0 */
 291               	/* stack size = 0 */
 292               	.L__stack_usage = 0
 293               		.stabn	68,0,57,.LM26-.LFBB7
 294               	.LM26:
 295 0068 8AE0      		ldi r24,lo8(10)
 296               	.L17:
  58:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****     unsigned char count = 0;
  59:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	
  60:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	count = 10;
  61:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	while(count){
  62:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 		while (!(TIFR1 & (1 << OCF1A)));
 297               		.stabn	68,0,62,.LM27-.LFBB7
 298               	.LM27:
 299 006a B19B      		sbis 0x16,1
 300 006c 00C0      		rjmp .L17
  63:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 		TIFR1 |= (1 << OCF1A);  // Output Compare Flag 초기화
 301               		.stabn	68,0,63,.LM28-.LFBB7
 302               	.LM28:
 303 006e B19A      		sbi 0x16,1
 304 0070 8150      		subi r24,lo8(-(-1))
  61:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 		while (!(TIFR1 & (1 << OCF1A)));
 305               		.stabn	68,0,61,.LM29-.LFBB7
 306               	.LM29:
 307 0072 01F4      		brne .L17
 308               	/* epilogue start */
  64:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 		count--;
  65:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	}
  66:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** }
 309               		.stabn	68,0,66,.LM30-.LFBB7
 310               	.LM30:
 311 0074 0895      		ret
 312               		.size	Timer1_100ms_delay, .-Timer1_100ms_delay
 313               	.Lscope7:
 314               		.stabs	"",36,0,0,.Lscope7-.LFBB7
 315               		.stabd	78,0,0
 316               		.stabs	"Timer1_1s_delay:F(0,49)",36,0,68,Timer1_1s_delay
 317               	.global	Timer1_1s_delay
 318               		.type	Timer1_1s_delay, @function
 319               	Timer1_1s_delay:
 320               		.stabd	46,0,0
  67:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 
  68:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** void Timer1_1s_delay(){
 321               		.stabn	68,0,68,.LM31-.LFBB8
 322               	.LM31:
 323               	.LFBB8:
 324               	/* prologue: function */
 325               	/* frame size = 0 */
 326               	/* stack size = 0 */
 327               	.L__stack_usage = 0
 328               		.stabn	68,0,68,.LM32-.LFBB8
 329               	.LM32:
 330 0076 84E6      		ldi r24,lo8(100)
 331               	.L23:
  69:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	unsigned char count = 0;
  70:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	
  71:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	count = 100;
  72:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	while(count){
  73:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 		while (!(TIFR1 & (1 << OCF1A)));
 332               		.stabn	68,0,73,.LM33-.LFBB8
 333               	.LM33:
 334 0078 B19B      		sbis 0x16,1
 335 007a 00C0      		rjmp .L23
  74:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 		TIFR1 |= (1 << OCF1A);  // Output Compare Flag 초기화
 336               		.stabn	68,0,74,.LM34-.LFBB8
 337               	.LM34:
 338 007c B19A      		sbi 0x16,1
 339 007e 8150      		subi r24,lo8(-(-1))
  72:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 		while (!(TIFR1 & (1 << OCF1A)));
 340               		.stabn	68,0,72,.LM35-.LFBB8
 341               	.LM35:
 342 0080 01F4      		brne .L23
 343               	/* epilogue start */
  75:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 		count--;
  76:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	}
  77:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** }
 344               		.stabn	68,0,77,.LM36-.LFBB8
 345               	.LM36:
 346 0082 0895      		ret
 347               		.size	Timer1_1s_delay, .-Timer1_1s_delay
 348               	.Lscope8:
 349               		.stabs	"",36,0,0,.Lscope8-.LFBB8
 350               		.stabd	78,0,0
 351               		.stabs	"EXTINT_init:F(0,49)",36,0,79,EXTINT_init
 352               	.global	EXTINT_init
 353               		.type	EXTINT_init, @function
 354               	EXTINT_init:
 355               		.stabd	46,0,0
  78:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 
  79:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** void EXTINT_init() {     // External interrupt 초기화
 356               		.stabn	68,0,79,.LM37-.LFBB9
 357               	.LM37:
 358               	.LFBB9:
 359               	/* prologue: function */
 360               	/* frame size = 0 */
 361               	/* stack size = 0 */
 362               	.L__stack_usage = 0
  80:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****     EIMSK = 0x01;   // INTF0 허용
 363               		.stabn	68,0,80,.LM38-.LFBB9
 364               	.LM38:
 365 0084 81E0      		ldi r24,lo8(1)
 366 0086 8DBB      		out 0x1d,r24
  81:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****     EICRA = 0x02;   // falling edge 일 때 interrupt 발생
 367               		.stabn	68,0,81,.LM39-.LFBB9
 368               	.LM39:
 369 0088 82E0      		ldi r24,lo8(2)
 370 008a 8093 6900 		sts 105,r24
 371 008e 0895      		ret
 372               		.size	EXTINT_init, .-EXTINT_init
 373               	.Lscope9:
 374               		.stabs	"",36,0,0,.Lscope9-.LFBB9
 375               		.stabd	78,0,0
 376               		.stabs	"__vector_18:F(0,49)",36,0,84,__vector_18
 377               	.global	__vector_18
 378               		.type	__vector_18, @function
 379               	__vector_18:
 380               		.stabd	46,0,0
  82:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** }
  83:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 
  84:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** ISR(USART_RX_vect) { // 수신 인터럽트
 381               		.stabn	68,0,84,.LM40-.LFBB10
 382               	.LM40:
 383               	.LFBB10:
 384 0090 1F92      		push r1
 385 0092 0F92      		push r0
 386 0094 0FB6      		in r0,__SREG__
 387 0096 0F92      		push r0
 388 0098 1124      		clr __zero_reg__
 389 009a 8F93      		push r24
 390               	/* prologue: Signal */
 391               	/* frame size = 0 */
 392               	/* stack size = 4 */
 393               	.L__stack_usage = 4
  85:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****     Data = UDR0;
 394               		.stabn	68,0,85,.LM41-.LFBB10
 395               	.LM41:
 396 009c 8091 C600 		lds r24,198
 397 00a0 8093 0000 		sts Data,r24
 398               	/* epilogue start */
  86:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** }
 399               		.stabn	68,0,86,.LM42-.LFBB10
 400               	.LM42:
 401 00a4 8F91      		pop r24
 402 00a6 0F90      		pop r0
 403 00a8 0FBE      		out __SREG__,r0
 404 00aa 0F90      		pop r0
 405 00ac 1F90      		pop r1
 406 00ae 1895      		reti
 407               		.size	__vector_18, .-__vector_18
 408               	.Lscope10:
 409               		.stabs	"",36,0,0,.Lscope10-.LFBB10
 410               		.stabd	78,0,0
 411               		.stabs	"__vector_1:F(0,49)",36,0,88,__vector_1
 412               	.global	__vector_1
 413               		.type	__vector_1, @function
 414               	__vector_1:
 415               		.stabd	46,0,0
  87:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 
  88:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** ISR(INT0_vect){ // 송신 인터럽트(외부 인터럽트 사용)
 416               		.stabn	68,0,88,.LM43-.LFBB11
 417               	.LM43:
 418               	.LFBB11:
 419 00b0 1F92      		push r1
 420 00b2 0F92      		push r0
 421 00b4 0FB6      		in r0,__SREG__
 422 00b6 0F92      		push r0
 423 00b8 1124      		clr __zero_reg__
 424 00ba 8F93      		push r24
 425               	/* prologue: Signal */
 426               	/* frame size = 0 */
 427               	/* stack size = 4 */
 428               	.L__stack_usage = 4
  89:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****     state = 1;
 429               		.stabn	68,0,89,.LM44-.LFBB11
 430               	.LM44:
 431 00bc 81E0      		ldi r24,lo8(1)
 432 00be 8093 0000 		sts state,r24
 433               	/* epilogue start */
  90:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** }
 434               		.stabn	68,0,90,.LM45-.LFBB11
 435               	.LM45:
 436 00c2 8F91      		pop r24
 437 00c4 0F90      		pop r0
 438 00c6 0FBE      		out __SREG__,r0
 439 00c8 0F90      		pop r0
 440 00ca 1F90      		pop r1
 441 00cc 1895      		reti
 442               		.size	__vector_1, .-__vector_1
 443               	.Lscope11:
 444               		.stabs	"",36,0,0,.Lscope11-.LFBB11
 445               		.stabd	78,0,0
 446               		.section	.text.startup,"ax",@progbits
 447               		.stabs	"main:F(0,1)",36,0,93,main
 448               	.global	main
 449               		.type	main, @function
 450               	main:
 451               		.stabd	46,0,0
  91:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 
  92:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** //////////////////////////////////////////////////////////////////////////
  93:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** int main(){
 452               		.stabn	68,0,93,.LM46-.LFBB12
 453               	.LM46:
 454               	.LFBB12:
 455               	/* prologue: function */
 456               	/* frame size = 0 */
 457               	/* stack size = 0 */
 458               	.L__stack_usage = 0
  94:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	setup();
 459               		.stabn	68,0,94,.LM47-.LFBB12
 460               	.LM47:
 461 0000 0E94 0000 		call setup
  95:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	USART0_init();
 462               		.stabn	68,0,95,.LM48-.LFBB12
 463               	.LM48:
 464 0004 0E94 0000 		call USART0_init
  96:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****     EXTINT_init();
 465               		.stabn	68,0,96,.LM49-.LFBB12
 466               	.LM49:
 467 0008 0E94 0000 		call EXTINT_init
  97:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	Timer1_init();
 468               		.stabn	68,0,97,.LM50-.LFBB12
 469               	.LM50:
 470 000c 0E94 0000 		call Timer1_init
  98:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	Timer1_1s_delay();
 471               		.stabn	68,0,98,.LM51-.LFBB12
 472               	.LM51:
 473 0010 0E94 0000 		call Timer1_1s_delay
  99:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****     sei();
 474               		.stabn	68,0,99,.LM52-.LFBB12
 475               	.LM52:
 476               	/* #APP */
 477               	 ;  99 "/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c" 1
 478 0014 7894      		sei
 479               	 ;  0 "" 2
 480               	/* #NOAPP */
 481               	.L35:
 100:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	
 101:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 	while(1){
 102:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****         PORTB = 0x00;   // 다 끄기
 482               		.stabn	68,0,102,.LM53-.LFBB12
 483               	.LM53:
 484 0016 15B8      		out 0x5,__zero_reg__
 103:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****         Data = 0;
 485               		.stabn	68,0,103,.LM54-.LFBB12
 486               	.LM54:
 487 0018 1092 0000 		sts Data,__zero_reg__
 104:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****         //USART0_send('E');   // 제어 완료 전송
 105:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 
 106:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****             if ((input_value & BTN) == BTN)
 488               		.stabn	68,0,106,.LM55-.LFBB12
 489               	.LM55:
 490 001c 189B      		sbis 0x3,0
 491 001e 00C0      		rjmp .L33
 107:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****             {
 108:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****             PORTB |= LED;
 492               		.stabn	68,0,108,.LM56-.LFBB12
 493               	.LM56:
 494 0020 2D9A      		sbi 0x5,5
 109:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****             //_delay_ms(50);
 110:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****             //PORTD |= (1 << PORTD2); // PD2, INT0 인터럽트 발생
 111:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****             if (state == 1)
 495               		.stabn	68,0,111,.LM57-.LFBB12
 496               	.LM57:
 497 0022 8091 0000 		lds r24,state
 498 0026 8130      		cpi r24,lo8(1)
 499 0028 01F4      		brne .L33
 112:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****             {
 113:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****                 USART0_send('A'); // A 보내기
 500               		.stabn	68,0,113,.LM58-.LFBB12
 501               	.LM58:
 502 002a 81E4      		ldi r24,lo8(65)
 503 002c 0E94 0000 		call USART0_send
 504               	.LBB4:
 505               	.LBB5:
 506               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext1
 507               	.Ltext1:
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/lib/avr/include/util/delay.h **** 
 189:/usr/lib/avr/include/util/delay.h **** #else
 190:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/lib/avr/include/util/delay.h **** 	{
 196:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/lib/avr/include/util/delay.h **** 		{
 200:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/lib/avr/include/util/delay.h **** 		}
 204:/usr/lib/avr/include/util/delay.h **** 		return;
 205:/usr/lib/avr/include/util/delay.h **** 	}
 206:/usr/lib/avr/include/util/delay.h **** 	else
 207:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/lib/avr/include/util/delay.h **** #endif
 210:/usr/lib/avr/include/util/delay.h **** }
 211:/usr/lib/avr/include/util/delay.h **** 
 212:/usr/lib/avr/include/util/delay.h **** /**
 213:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/lib/avr/include/util/delay.h **** 
 215:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/lib/avr/include/util/delay.h **** 
 217:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/lib/avr/include/util/delay.h **** 
 220:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/lib/avr/include/util/delay.h **** 
 226:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/lib/avr/include/util/delay.h **** 
 231:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/lib/avr/include/util/delay.h **** 
 236:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/lib/avr/include/util/delay.h ****    respectively.
 240:/usr/lib/avr/include/util/delay.h **** 
 241:/usr/lib/avr/include/util/delay.h ****    \note
 242:/usr/lib/avr/include/util/delay.h **** 
 243:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/lib/avr/include/util/delay.h **** 
 253:/usr/lib/avr/include/util/delay.h ****  */
 254:/usr/lib/avr/include/util/delay.h **** void
 255:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 256:/usr/lib/avr/include/util/delay.h **** {
 257:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 258:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/usr/lib/avr/include/util/delay.h **** 
 265:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/lib/avr/include/util/delay.h **** 
 268:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/lib/avr/include/util/delay.h **** 
 271:/usr/lib/avr/include/util/delay.h **** 	#else
 272:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 273:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/usr/lib/avr/include/util/delay.h **** 	#endif
 275:/usr/lib/avr/include/util/delay.h **** 
 276:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 508               		.stabn	68,0,276,.LM59-.LFBB12
 509               	.LM59:
 510 0030 80EA      		ldi r24,lo8(-96)
 511 0032 8A95      	1:	dec r24
 512 0034 01F4      		brne 1b
 513               	.LBE5:
 514               	.LBE4:
 515               		.stabs	"/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c",132,0,0,.Ltext2
 516               	.Ltext2:
 114:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****                 _delay_us(30);
 115:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****                 state = 0; // 버튼이 눌릴 때만 한 번 초기화
 517               		.stabn	68,0,115,.LM60-.LFBB12
 518               	.LM60:
 519 0036 1092 0000 		sts state,__zero_reg__
 520               	.L33:
 116:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****             }
 117:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****             // PORTD &= ~(1 << PORTD2); // PD2, INT0 다시 LOW로 설정
 118:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****         }
 119:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c **** 
 120:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****         if (Data) {      // data 수신
 521               		.stabn	68,0,120,.LM61-.LFBB12
 522               	.LM61:
 523 003a 8091 0000 		lds r24,Data
 524 003e 8823      		tst r24
 525 0040 01F0      		breq .L35
 121:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****             PORTB |= RED;
 526               		.stabn	68,0,121,.LM62-.LFBB12
 527               	.LM62:
 528 0042 299A      		sbi 0x5,1
 122:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****             PORTB |= LED;
 529               		.stabn	68,0,122,.LM63-.LFBB12
 530               	.LM63:
 531 0044 2D9A      		sbi 0x5,5
 123:/home/cdm/Desktop/AVR/Fast_Test/Fast_Test.c ****             Timer1_1s_delay();   
 532               		.stabn	68,0,123,.LM64-.LFBB12
 533               	.LM64:
 534 0046 0E94 0000 		call Timer1_1s_delay
 535 004a 00C0      		rjmp .L35
 536               		.size	main, .-main
 537               	.Lscope12:
 538               		.stabs	"",36,0,0,.Lscope12-.LFBB12
 539               		.stabd	78,0,0
 540               	.global	state
 541               		.section .bss
 542               		.type	state, @object
 543               		.size	state, 1
 544               	state:
 545 0000 00        		.zero	1
 546               	.global	Data
 547               		.type	Data, @object
 548               		.size	Data, 1
 549               	Data:
 550 0001 00        		.zero	1
 551               		.stabs	"Data:G(0,50)=B(0,13)",32,0,15,0
 552               		.stabs	"state:G(0,50)",32,0,16,0
 553               		.text
 554               		.stabs	"",100,0,0,.Letext0
 555               	.Letext0:
 556               		.ident	"GCC: (GNU) 5.4.0"
 557               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Fast_Test.c
     /tmp/ccSeSppt.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccSeSppt.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccSeSppt.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccSeSppt.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccSeSppt.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccSeSppt.s:107    .text:0000000000000000 setup
     /tmp/ccSeSppt.s:138    .text:000000000000000e USART0_init
     /tmp/ccSeSppt.s:175    .text:000000000000002c USART0_send
     /tmp/ccSeSppt.s:201    .text:000000000000003a USART0_read
     /tmp/ccSeSppt.s:229    .text:0000000000000048 Timer1_init
     /tmp/ccSeSppt.s:259    .text:0000000000000060 Timer1_10ms_delay
     /tmp/ccSeSppt.s:284    .text:0000000000000068 Timer1_100ms_delay
     /tmp/ccSeSppt.s:319    .text:0000000000000076 Timer1_1s_delay
     /tmp/ccSeSppt.s:354    .text:0000000000000084 EXTINT_init
     /tmp/ccSeSppt.s:379    .text:0000000000000090 __vector_18
     /tmp/ccSeSppt.s:549    .bss:0000000000000001 Data
     /tmp/ccSeSppt.s:414    .text:00000000000000b0 __vector_1
     /tmp/ccSeSppt.s:544    .bss:0000000000000000 state
     /tmp/ccSeSppt.s:450    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
__do_clear_bss

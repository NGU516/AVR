
Timer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000176  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ad  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000062a  00000000  00000000  000008bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000269  00000000  00000000  00000ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001150  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033d  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  88:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
#define LED 1<<5 // LED pin

unsigned char count = 0;

void setup(){
	PORTB = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	85 b9       	out	0x05, r24	; 5
	DDRB = 0xFF;
  94:	84 b9       	out	0x04, r24	; 4
  96:	08 95       	ret

00000098 <main>:
}

void main(void)
{
	setup();
  98:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	
	// TCCR(Timer Counter Control Register), TCNT(Timer Count0)
	TCCR0A = 0x00;  // Normal mode
  9c:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS02) | (1 << CS00);  // prescaler 1024
  9e:	85 e0       	ldi	r24, 0x05	; 5
  a0:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0x64;  // 100부터 255까지, 256은 overflow 순간 count
  a2:	84 e6       	ldi	r24, 0x64	; 100
  a4:	86 bd       	out	0x26, r24	; 38
	// 255-TCNT0+1 -> 156, 156*64us = 9.984ms
	
	while (1)
	{
		count = 100;
  a6:	84 e6       	ldi	r24, 0x64	; 100
  a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		PORTB = 0xFF;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	85 b9       	out	0x05, r24	; 5
		
		while(count){
  b0:	0c c0       	rjmp	.+24     	; 0xca <main+0x32>
			while(!(TIFR0 & 0x01));
  b2:	a8 9b       	sbis	0x15, 0	; 21
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <main+0x1a>
			TCNT0 = 0x64;
  b6:	84 e6       	ldi	r24, 0x64	; 100
  b8:	86 bd       	out	0x26, r24	; 38
			TIFR0 |= 0x01;  // TIFR(Timer Interrupt Flag Register), TOV0(Timer overflow) flag 초기화
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	85 bb       	out	0x15, r24	; 21
			count--;
  c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c4:	81 50       	subi	r24, 0x01	; 1
  c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	{
		count = 100;
		
		PORTB = 0xFF;
		
		while(count){
  ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ce:	81 11       	cpse	r24, r1
  d0:	f0 cf       	rjmp	.-32     	; 0xb2 <main+0x1a>
			TCNT0 = 0x64;
			TIFR0 |= 0x01;  // TIFR(Timer Interrupt Flag Register), TOV0(Timer overflow) flag 초기화
			count--;
		}
		
		PORTB = 0x00;
  d2:	15 b8       	out	0x05, r1	; 5
		
		count = 100;
  d4:	84 e6       	ldi	r24, 0x64	; 100
  d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		while(count){
  da:	0c c0       	rjmp	.+24     	; 0xf4 <main+0x5c>
			while(!(TIFR0 & 0x01));
  dc:	a8 9b       	sbis	0x15, 0	; 21
  de:	fe cf       	rjmp	.-4      	; 0xdc <main+0x44>
			TCNT0 = 0x64;
  e0:	84 e6       	ldi	r24, 0x64	; 100
  e2:	86 bd       	out	0x26, r24	; 38
			TIFR0 |= 0x01;
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	85 bb       	out	0x15, r24	; 21
			count--;
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ee:	81 50       	subi	r24, 0x01	; 1
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		PORTB = 0x00;
		
		count = 100;
		while(count){
  f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f8:	81 11       	cpse	r24, r1
  fa:	f0 cf       	rjmp	.-32     	; 0xdc <main+0x44>
  fc:	d4 cf       	rjmp	.-88     	; 0xa6 <main+0xe>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
